/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStreamInterface;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStreamInterface* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
static yyconst short int yy_acclist[616] =
    {   0,
      118,  116,  117,  116,  117,  116,  117,  116,  117,  116,
      117,  114,  116,  117,  115,  116,  117,  116,  117,  108,
      116,  117,  108,  116,  117,  108,  116,  117,  108,  116,
      117,  108,  116,  117,  108,  116,  117,  108,  116,  117,
      108,  116,  117,  108,  116,  117,  108,  116,  117,  108,
      116,  117,  108,  116,  117,  108,  116,  117,  108,  116,
      117,  108,  116,  117,  108,  116,  117,  108,  116,  117,
      108,  116,  117,  116,  117,  113,  116,  117,  111,  116,
      117,  116,  117,  114,  116,  117,  102,  106,  106,  103,
        1,    2,  107,  108,  108,   49,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,    3,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   89,  108,    9,
      108,  108,   61,  108,   64,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  112,  109,  110,  106,  106,
      106,  107,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,    5,  108,  108,
      108,  108,  108,   43,  108,  108,  108,  108,  108,   94,

      108,  108,   67,  108,  108,  108,  108,  108,  108,  108,
      108,   72,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   11,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  106,  106,  108,  108,   50,  108,   39,
      108,  108,   51,  108,    7,  108,  108,   40,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   10,  108,   37,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   65,  108,   45,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,   97,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,   78,  108,
      108,   79,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   38,  108,  108,  108,  106,  106,  108,  108,  108,
       14,  108,   12,  108,  108,   34,  108,   18,  108,  108,
      108,  108,  108,  108,   55,  108,  108,  108,  108,   56,
      108,   88,  108,   58,  108,   41,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   73,  108,  108,
       44,  108,  108,  108,  108,  108,  108,  108,  108,   98,

      108,  108,  108,  108,   13,  108,  108,  108,  108,  108,
       80,  108,  108,   36,  108,  108,  108,  108,   29,   84,
      108,  108,  108,    4,  108,  106,  106,  108,   85,  108,
      108,  108,  108,  108,  108,  108,   42,  108,  108,  108,
       20,  108,  108,  108,   28,  108,  108,  108,   91,  108,
       22,  108,  108,  108,  108,  108,   93,  108,   66,  108,
      108,  108,   69,  108,  108,  108,  108,   25,  108,  108,
       16,  108,   74,  108,   46,  108,   17,  108,  108,   21,
      108,  108,   76,  108,   35,  108,    6,  108,  108,  108,
      100,  108,  108,  108,  108,   77,  108,  108,   82,  108,

      108,   83,  108,  108,  108,  105,  106,  106,  108,   86,
      108,   52,  108,  108,   53,  108,    8,  108,  108,  108,
       87,  108,   57,  108,   59,  108,  108,  108,  108,  108,
      108,  108,  108,   95,  108,   70,  108,   26,  108,  108,
      108,  108,  108,  108,  108,  108,   32,  108,  108,  108,
      108,   23,  108,  108,  104,  106,   48,  108,   15,  108,
       54,  108,   24,  108,  108,   60,  108,  108,  108,   63,
      108,  108,   68,  108,  108,   71,  108,  108,   96,  108,
      108,   31,  108,  108,   33,  108,  108,   47,  108,   19,
      108,  108,  108,   62,  108,   30,  108,   27,  108,  108,

      108,  101,  108,   81,  108,   90,  108,   92,  108,   75,
      108,  108,  108,   99,  108
    } ;

static yyconst short int yy_accept[479] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    6,    8,   10,   12,   15,   18,   20,   23,   26,
       29,   32,   35,   38,   41,   44,   47,   50,   53,   56,
       59,   62,   65,   68,   71,   74,   76,   79,   82,   84,
       87,   87,   88,   88,   89,   90,   90,   91,   91,   92,
       93,   94,   95,   96,   98,   99,  100,  101,  102,  103,
      104,  105,  106,  107,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  120,  122,  123,  125,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,

      149,  150,  151,  152,  153,  154,  155,  156,  157,  157,
      158,  158,  158,  159,  159,  160,  161,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  190,  191,  192,  193,  194,  196,
      197,  198,  199,  200,  202,  203,  205,  206,  207,  208,
      209,  210,  211,  212,  214,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  232,  233,  234,  235,  236,  237,  238,  239,  240,
      241,  242,  243,  244,  245,  246,  247,  248,  250,  252,

      253,  255,  257,  258,  260,  261,  262,  263,  264,  265,
      266,  267,  268,  270,  272,  273,  274,  275,  276,  277,
      278,  279,  280,  281,  282,  283,  284,  285,  286,  288,
      290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
      300,  301,  302,  303,  304,  306,  307,  308,  309,  310,
      311,  312,  313,  314,  315,  316,  317,  318,  319,  321,
      322,  324,  325,  326,  327,  328,  329,  330,  331,  332,
      334,  335,  336,  337,  338,  339,  340,  341,  343,  345,
      346,  348,  350,  351,  352,  353,  354,  355,  357,  358,
      359,  360,  362,  364,  366,  368,  369,  370,  371,  372,

      373,  374,  375,  376,  377,  378,  379,  380,  381,  382,
      383,  384,  385,  386,  387,  388,  390,  391,  393,  394,
      395,  396,  397,  398,  399,  400,  402,  403,  404,  405,
      407,  408,  409,  410,  411,  413,  414,  416,  417,  418,
      419,  422,  423,  424,  426,  427,  428,  429,  431,  432,
      433,  434,  435,  436,  437,  439,  440,  441,  443,  444,
      445,  447,  448,  449,  451,  453,  454,  455,  456,  457,
      459,  461,  462,  463,  465,  466,  467,  468,  470,  471,
      473,  475,  477,  479,  480,  482,  483,  485,  487,  489,
      490,  491,  493,  494,  495,  496,  498,  499,  501,  502,

      504,  505,  506,  508,  509,  510,  512,  514,  515,  517,
      519,  520,  521,  523,  525,  527,  528,  529,  530,  531,
      532,  533,  534,  536,  538,  540,  541,  542,  543,  544,
      545,  546,  547,  549,  550,  551,  552,  554,  555,  557,
      559,  561,  563,  565,  566,  568,  569,  570,  572,  573,
      575,  576,  578,  579,  581,  582,  584,  585,  587,  588,
      590,  592,  593,  594,  596,  598,  600,  601,  602,  604,
      606,  608,  610,  612,  613,  614,  616,  616
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    4,    1,    1,    1,    5,    1,
        1,    6,    1,    1,    1,    1,    7,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    9,
        1,   10,    1,   11,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
        1,   13,    1,    1,   12,    1,   14,   15,   16,   17,

       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   12,   30,   31,   32,   33,   34,   35,   36,
       37,   38,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[39] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
        1,    3,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[488] =
    {   0,
        0,    0,   33,   35,   38,   44,   47,   49,  521,  522,
       52,  498,   55,   55,  522,  522,    0,    0,   48,   50,
       56,   48,   58,   68,   78,  491,   53,   73,   85,  500,
      104,   90,  107,   88,  496,  509,  522,  522,   88,   59,
       99,  522,  513,    0,   47,  108,  522,  512,  522,  522,
        0,    0,  482,  481,  480,  482,  491,  476,   92,  117,
      493,  479,  124,  472,  473,  470,  484,   57,  476,  106,
      472,  469,  476,    0,    0,  468,  119,    0,   87,  120,
      471,  472,  462,  475,  129,  125,  477,  141,  454,  103,
      462,  110,  140,  460,  466,  460,  460,  455,  142,  455,

      456,  454,  141,  140,  451,  142,  458,  522,  155,  522,
      477,  156,  522,  476,    0,  448,  460,    0,  443,  456,
      455,  447,  457,  452,  451,  452,  437,  450,  434,  145,
      442,  449,  444,  446,  442,  433,  431,  432,  438,  424,
      440,  435,  438,  433,  432,  146,  427,  416,  429,  422,
      425,  426,  421,    0,  424,    0,  411,  416,  151,  405,
      406,  412,  419,    0,  402,  402,  408,  413,  401,  403,
      411,  162,  158,  410,  395,  410,  396,  396,  396,  404,
        0,  403,  388,  392,  397,  389,  167,  388,  388,  382,
      396,  398,  386,  382,  384,  378,  377,    0,  388,  381,

        0,    0,  383,    0,  379,  371,  369,  378,  373,  365,
      377,  371,    0,    0,  363,  372,  155,  375,  367,  374,
      358,  375,  361,  166,  357,  359,  371,  354,    0,    0,
      352,  348,  365,  350,  365,  352,  355,  362,  357,  352,
      345,  342,  353,  352,    0,  337,  350,  339,  342,  343,
      170,  348,  333,  346,  340,  335,  324,  327,    0,  173,
        0,  337,  338,  328,  335,  333,  322,  331,  317,    0,
      317,  330,  317,  313,  331,  312,  329,    0,    0,  324,
        0,    0,  314,  326,  314,  324,  319,    0,  320,  318,
      307,    0,  308,    0,    0,  316,  314,  304,  313,  296,

      309,  299,  168,  296,  306,  291,  300,  301,  289,  305,
      286,  301,  300,  288,  287,    0,  296,    0,  295,  292,
      296,  293,  276,  287,  274,    0,  284,  274,  289,  271,
      279,  282,  285,  279,    0,  281,    0,  278,  268,  262,
        0,  279,  270,    0,  259,  273,  273,    0,  261,  270,
      253,  260,  252,  251,    0,  260,  250,    0,  243,  258,
        0,  260,  255,    0,    0,  260,  261,  260,  259,    0,
        0,  255,  253,    0,  245,  251,  236,    0,  242,    0,
        0,    0,    0,  241,    0,  246,    0,    0,    0,  236,
      231,    0,  244,  242,  234,    0,  235,    0,  240,    0,

      232,  231,    0,  237,  222,    0,    0,  235,    0,    0,
      234,  219,    0,    0,    0,  223,  217,  230,  231,  221,
      229,  226,    0,    0,    0,  225,  205,  216,  211,  212,
      220,  210,    0,  218,  217,  217,    0,  215,    0,    0,
        0,    0,    0,  200,    0,  203,  212,    0,  211,    0,
      211,    0,  199,    0,  204,    0,  193,    0,  207,    0,
        0,  192,  180,    0,    0,    0,  182,  158,    0,    0,
        0,    0,    0,  175,  175,    0,  522,  201,  204,   97,
      207,   68,  209,  212,  215,  217,  219
    } ;

static yyconst short int yy_def[488] =
    {   0,
      477,    1,  478,  478,  478,  478,  478,  478,  477,  477,
      479,  480,  481,  477,  477,  477,  482,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  477,  477,  477,  484,  485,
      479,  477,  479,  486,  486,  481,  477,  481,  477,  477,
      487,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  477,  484,  477,
      484,  485,  477,  485,  486,  486,  486,  487,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  486,  486,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  486,  486,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  486,  486,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,

      483,  483,  486,  486,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  486,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,    0,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477
    } ;

static yyconst short int yy_nxt[561] =
    {   0,
       10,   10,   11,   12,   13,   10,   14,   10,   15,   16,
       17,   18,   10,   19,   20,   21,   22,   23,   24,   18,
       18,   25,   18,   18,   26,   18,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   18,   18,   18,   36,   37,
       36,   15,   16,   15,   16,   37,   15,   16,   38,   39,
       38,   39,   15,   16,   42,   40,   16,   40,   16,   47,
       49,   50,   53,   55,   43,   63,   80,   48,  113,   59,
       51,  114,  116,  117,   81,   64,   60,   56,   54,   57,
       61,   69,   65,   62,   66,  138,   58,   82,  139,   70,
      110,   67,   71,   68,   74,   72,   75,   73,   85,   44,

      111,   42,  150,   76,   77,   83,   84,   97,   78,  105,
       98,   43,   47,  151,   86,  106,  167,   87,   89,   99,
       48,   90,  125,  126,   91,   92,  100,  168,  101,  170,
      127,  102,  141,  103,  128,   93,   94,  104,   95,  131,
       96,  142,  132,  147,  158,  152,  160,  171,  133,  148,
      149,  153,  161,  172,  163,  179,  185,  110,  159,  164,
      188,  189,  186,  191,  236,  113,  192,  111,  114,  173,
      224,  187,  165,  225,  180,  207,  208,  249,  181,  251,
      265,  290,  237,  298,  291,  323,  367,  299,  266,  332,
      252,  476,  475,  250,  368,  474,  324,  473,  472,  333,

      334,   10,   10,   10,   41,   41,   41,   46,   46,   46,
       52,   52,  109,  109,  109,  112,  112,  112,  115,  115,
      118,  118,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,

      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  366,  365,  364,  363,  362,
      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  331,  330,  329,
      328,  327,  326,  325,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  297,  296,  295,
      294,  293,  292,  289,  288,  287,  286,  285,  284,  283,

      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  196,  195,  194,  477,  477,  193,
      190,  184,  183,  182,  178,  177,  176,  175,  174,  169,
      166,  162,  157,  156,  155,  154,  146,  145,  144,  143,

      140,  137,  136,  135,  134,  130,  129,  124,  123,  122,
      121,  120,  119,  477,  477,  108,  107,   88,   79,   45,
      477,    9,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477
    } ;

static yyconst short int yy_chk[561] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    5,
        4,    3,    3,    4,    4,    6,    5,    5,    7,    7,
        8,    8,    6,    6,   11,    7,    7,    8,    8,   13,
       14,   14,   19,   20,   11,   22,   27,   13,   40,   21,
      482,   40,   45,   45,   27,   22,   21,   20,   19,   20,
       21,   24,   23,   21,   23,   68,   20,   28,   68,   24,
       39,   23,   24,   23,   25,   24,   25,   24,   29,  480,

       39,   41,   79,   25,   25,   28,   28,   32,   25,   34,
       32,   41,   46,   79,   29,   34,   90,   29,   31,   32,
       46,   31,   59,   59,   31,   31,   32,   90,   33,   92,
       60,   33,   70,   33,   60,   31,   31,   33,   31,   63,
       31,   70,   63,   77,   85,   80,   86,   92,   63,   77,
       77,   80,   86,   93,   88,   99,  103,  109,   85,   88,
      104,  104,  103,  106,  159,  112,  106,  109,  112,   93,
      146,  103,   88,  146,   99,  130,  130,  172,   99,  173,
      187,  217,  159,  224,  217,  251,  303,  224,  187,  260,
      173,  475,  474,  172,  303,  468,  251,  467,  463,  260,

      260,  478,  478,  478,  479,  479,  479,  481,  481,  481,
      483,  483,  484,  484,  484,  485,  485,  485,  486,  486,
      487,  487,  462,  459,  457,  455,  453,  451,  449,  447,
      446,  444,  438,  436,  435,  434,  432,  431,  430,  429,
      428,  427,  426,  422,  421,  420,  419,  418,  417,  416,
      412,  411,  408,  405,  404,  402,  401,  399,  397,  395,
      394,  393,  391,  390,  386,  384,  379,  377,  376,  375,
      373,  372,  369,  368,  367,  366,  363,  362,  360,  359,
      357,  356,  354,  353,  352,  351,  350,  349,  347,  346,
      345,  343,  342,  340,  339,  338,  336,  334,  333,  332,

      331,  330,  329,  328,  327,  325,  324,  323,  322,  321,
      320,  319,  317,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  302,  301,  300,  299,  298,
      297,  296,  293,  291,  290,  289,  287,  286,  285,  284,
      283,  280,  277,  276,  275,  274,  273,  272,  271,  269,
      268,  267,  266,  265,  264,  263,  262,  258,  257,  256,
      255,  254,  253,  252,  250,  249,  248,  247,  246,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  228,  227,  226,  225,  223,  222,  221,
      220,  219,  218,  216,  215,  212,  211,  210,  209,  208,

      207,  206,  205,  203,  200,  199,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  186,  185,  184,  183,
      182,  180,  179,  178,  177,  176,  175,  174,  171,  170,
      169,  168,  167,  166,  165,  163,  162,  161,  160,  158,
      157,  155,  153,  152,  151,  150,  149,  148,  147,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  117,  116,  114,  111,  107,
      105,  102,  101,  100,   98,   97,   96,   95,   94,   91,
       89,   87,   84,   83,   82,   81,   76,   73,   72,   71,

       69,   67,   66,   65,   64,   62,   61,   58,   57,   56,
       55,   54,   53,   48,   43,   36,   35,   30,   26,   12,
        9,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2003 $organization$.
 *
 * This software is provided by the author and contributors ``as is'' and
 * any express or implied warranties, including, but not limited to, the
 * implied warranties of merchantability and fitness for a particular purpose
 * are disclaimed.  In no event shall the author or contributors be liable
 * for any direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute goods
 * or services; loss of use, data, or profits; or business interruption)
 * however caused and on any theory of liability, whether in contract, strict
 * liability, or tort (including negligence or otherwise) arising in any way
 * out of the use of this software, even if advised of the possibility of
 * such damage.
 *
 *   File: ccxxlex.l
 *
 * Author: $author$
 *   Date: 5/1/2008
 **********************************************************************
 */
#include "ccxxlexer.hxx"
#define XXSwitch(on, text, token) on(text, token); OnSwitch(text, token)
#define XXPush(on, text, token) on(text, token); OnPush(text, token)
#define XXPop(on, text, token) on(text, token); OnPop(text, token)
#define XX(on, text, token) on(text, token)
#define COMMENT 1
#define COMMENTLN 2
#define INCLUDE 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_SWITCH_STATE
static void yy_switch_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 478 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 522 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ XXPush(OnBeginComment, yytext, COMMENT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ XXPush(OnBeginCommentLN, yytext, COMMENTLN); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ XX(OnReserved, yytext, 0); }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ XX(OnReservedX, yytext, 0); }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ XX(OnReservedY, yytext, 0); }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ XX(OnString, yytext, 0); }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ XX(OnChar, yytext, 0); }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ XXPush(OnProcessor, yytext, INCLUDE); }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ XXPush(OnProcessor, yytext, INCLUDE); }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ XX(OnProcessor, yytext, 0); }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ XX(OnProcessor, yytext, 0); }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ XX(OnText, yytext, 0); }
	YY_BREAK


case 109:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ XX(OnIncludeL, yytext, 0); }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ XXPop(OnText, yytext, INCLUDE);}
	YY_BREAK


case 112:
YY_RULE_SETUP
{ XXPop(OnEndComment, yytext, COMMENT);}
	YY_BREAK


case 113:
YY_RULE_SETUP
{ XXPop(OnEndCommentLN, yytext, COMMENTLN);}
	YY_BREAK


case 114:
YY_RULE_SETUP
{ XX(OnLT, yytext, 0);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{ XX(OnGT, yytext, 0);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{ XX(OnText, yytext, 0);}
	YY_BREAK

case 117:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(COMMENTLN):
			case YY_STATE_EOF(INCLUDE):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStreamInterface &out, cCharStreamInterface &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStreamInterface *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStreamInterface* new_in, cCharStreamInterface* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 478 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 478 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 477);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStreamInterface* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStreamInterface* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStreamInterface* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_SWITCH_STATE
void yyIsLexer::yy_switch_state( int new_state )
    {
    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

