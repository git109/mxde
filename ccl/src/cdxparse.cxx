#ifndef lint
static char yysccsid[] = "@(#)yaccpar 1.8++ (Berkeley) 01/20/90, (Boyd) 1998";
#endif
#define YYBYACC 1
#define YYCPLUSPLUS 1
#include "cdxparse.h"
#include "cdxparser.hxx"
#define XX_INCLUDE 257
#define XX_USING 258
#define XX_EXTERN 259
#define XX_FOREIGN 260
#define XX_NATIVE 261
#define XX_FRIEND 262
#define XX_PUBLIC 263
#define XX_PRIVATE 264
#define XX_PROTECTED 265
#define XX_CONST 266
#define XX_STATIC 267
#define XX_AUTO 268
#define XX_REGISTER 269
#define XX_VOLITILE 270
#define XX_INTERRUPT 271
#define XX_CDECL 272
#define XX_PASCAL 273
#define XX_PACKED 274
#define XX_PARALLEL 275
#define XX_REMOTE 276
#define XX_SHARED 277
#define XX_PURE 278
#define XX_VIRTUAL 279
#define XX_OPERATOR 280
#define XX_ABSOLUTE 281
#define XX_IO 282
#define XX_PROCESS 283
#define XX_MODULE 284
#define XX_MAIN 285
#define XX_THREAD 286
#define XX_SIGNAL 287
#define XX_CLASS 288
#define XX_NAMESPACE 289
#define XX_STRUCT 290
#define XX_UNION 291
#define XX_ARRAY 292
#define XX_SET 293
#define XX_STRING 294
#define XX_SIGNED 295
#define XX_UNSIGNED 296
#define XX_FLOAT 297
#define XX_VOID 298
#define XX_ENUM 299
#define XX_DOUBLE 300
#define XX_SHORT 301
#define XX_LONG 302
#define XX_INT 303
#define XX_CHAR 304
#define XX_BOOL 305
#define XX_TRUE 306
#define XX_FALSE 307
#define XX_WHAT 308
#define XX_AT 309
#define XX_IS 310
#define XX_SUPER 311
#define XX_THIS 312
#define XX_NEW 313
#define XX_DELETE 314
#define XX_POSITIONOF 315
#define XX_SIZEOF 316
#define XX_TYPEOF 317
#define XX_TEXTOF 318
#define XX_POSITIONIS 319
#define XX_SIZEIS 320
#define XX_TYPEIS 321
#define XX_TEXTIS 322
#define XX_TEMPLATE 323
#define XX_DO 324
#define XX_WHILE 325
#define XX_UNTIL 326
#define XX_REPEAT 327
#define XX_FOR 328
#define XX_EACH 329
#define XX_OF 330
#define XX_SWITCH 331
#define XX_CASE 332
#define XX_DEFAULT 333
#define XX_IF 334
#define XX_ELSE 335
#define XX_BEFORE 336
#define XX_AFTER 337
#define XX_WHEN 338
#define XX_GOTO 339
#define XX_BREAK 340
#define XX_CONTINUE 341
#define XX_RETURN 342
#define XX_TRY 343
#define XX_CATCH 344
#define XX_THROW 345
#define XX_WITH 346
#define XX_COLONCOLON_AND 347
#define XX_COLONCOLON_STAR 348
#define XX_COLONCOLON 349
#define XX_DOTDOT 350
#define XX_ELIPSIS 351
#define XX_BSLASHBSLASH_SHR 352
#define XX_BSLASHBSLASH_SHL 353
#define XX_BSLASHBSLASH 354
#define XX_BSLASHQUESTION 355
#define XX_DOTBSLASHQUESTION 356
#define XX_DOTQUESTION 357
#define XX_ATQUESTION 358
#define XX_ASSIGN 359
#define XX_LAND_ASSIGN 360
#define XX_LOR_ASSIGN 361
#define XX_LXOR_ASSIGN 362
#define XX_POW_ASSIGN 363
#define XX_ROO_ASSIGN 364
#define XX_LOG_ASSIGN 365
#define XX_SHR_ASSIGN 366
#define XX_SHL_ASSIGN 367
#define XX_ADD_ASSIGN 368
#define XX_SUB_ASSIGN 369
#define XX_MUL_ASSIGN 370
#define XX_DIV_ASSIGN 371
#define XX_MOD_ASSIGN 372
#define XX_QUO_ASSIGN 373
#define XX_AND_ASSIGN 374
#define XX_OR_ASSIGN 375
#define XX_XOR_ASSIGN 376
#define XX_RIGHT_OP 377
#define XX_LEFT_OP 378
#define XX_INC_OP 379
#define XX_DEC_OP 380
#define XX_COM_OP 381
#define XX_LCOM_OP 382
#define XX_LE_OP 383
#define XX_GE_OP 384
#define XX_NE_OP 385
#define XX_EQ_OP 386
#define XX_SHR_OP 387
#define XX_SHL_OP 388
#define XX_POW_OP 389
#define XX_ROO_OP 390
#define XX_LOG_OP 391
#define XX_LNOT_OP 392
#define XX_LAND_OP 393
#define XX_LOR_OP 394
#define XX_DEC_LITERAL 395
#define XX_BIN_LITERAL 396
#define XX_HEX_LITERAL 397
#define XX_OCT_LITERAL 398
#define XX_FLOAT_LITERAL 399
#define XX_CHAR_LITERAL 400
#define XX_TEXT_LITERAL 401
#define XX_URI_LITERAL 402
#define XX_TEMPLATE_LITERAL 403
#define XX_ELEMENT_LITERAL 404
#define XX_IDENTIFIER 405
#define YYERRCODE 256
short yyIsParser::yylhs[] = {                                        -1,
    0,    2,    3,    3,    5,    5,    5,    5,    9,   10,
   11,   11,   12,   12,   13,    8,    8,   14,   14,   15,
   15,   15,   16,    6,    6,    7,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   18,   18,   21,   21,
   21,   20,   22,   22,    4,   23,   23,    1,   24,   24,
   27,   27,   17,   17,   17,   28,   28,   30,   30,   32,
   32,   34,   34,   36,   36,   38,   38,   40,   40,   42,
   42,   44,   44,   46,   46,   48,   48,   50,   50,   52,
   52,   53,   53,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   58,   58,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,   63,   63,   69,   69,   69,   69,   69,   69,   69,
   69,   69,   61,   61,   59,   59,   74,   65,   65,   75,
   62,   62,   60,   60,   76,   67,   67,   77,   68,   68,
   56,   56,   56,   66,   80,   80,   25,   25,   81,   81,
   81,   83,   83,   84,   84,   85,   78,   82,   82,   86,
   72,   57,   57,   87,   87,   88,   88,   88,   79,   29,
   31,   39,   41,   43,   54,   54,   54,   54,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   33,   33,   35,   35,   37,
   37,   37,   37,   45,   45,   47,   47,   49,   49,   49,
   49,   51,   51,   51,   70,   71,   89,   89,   89,   89,
   89,   89,   73,   73,   73,   73,   73,   73,   73,   73,
   73,   73,   90,   90,   90,   64,   64,   64,   91,   91,
   91,   92,   92,   92,   99,   99,  100,   93,  101,  101,
  102,   94,   95,   96,   97,   98,
};
short yyIsParser::yylen[] = {                                         2,
    1,    3,    1,    1,    2,    2,    2,    1,    1,    4,
    1,    1,    2,    1,    1,    2,    1,    3,    2,    3,
    2,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    4,    2,
    1,    1,    3,    1,    1,    1,    1,    1,    4,    1,
    3,    1,    5,    3,    1,    3,    1,    3,    1,    2,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    4,
    1,    2,    1,    4,    3,    5,    3,    2,    4,    5,
    7,    6,    6,    6,    5,    3,    5,    7,    6,    6,
    6,    5,    3,    3,    4,    6,    5,    5,    5,    4,
    4,    6,    5,    5,    5,    4,    2,    4,    6,    5,
    5,    5,    4,    2,    3,    5,    4,    4,    4,    3,
    1,    1,    2,    1,    2,    2,    2,    3,    3,    2,
    4,    4,    5,    4,    2,    1,    2,    4,    4,    5,
    4,    2,    3,    3,    3,    3,    3,    2,    3,    2,
    1,    1,    1,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    3,    1,    3,    1,    3,
    3,    2,    3,    3,    1,    3,    1,    3,    3,    3,
    1,    1,    1,    3,    3,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    1,    2,    1,    1,    2,    2,
    2,    3,    2,    3,    1,    4,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    2,    2,    2,    1,    2,    2,
    1,    2,    2,    1,    2,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,
};
short yyIsParser::yydefred[] = {                                      0,
    0,    0,    0,    0,  225,  226,  227,  167,  168,  169,
    0,  131,    0,    0,  271,  272,  267,  268,  269,  270,
    0,  246,  302,  303,  305,  304,  306,    0,  288,  291,
  297,    0,    0,  247,    0,    0,    0,    0,    0,    0,
  228,    0,    1,   52,   48,    0,   50,    0,    0,   59,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   79,   81,    0,    0,    0,  134,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  161,    0,  170,  172,    0,
  179,    0,  187,  192,    0,  197,  199,  200,  201,  205,
  208,  265,  273,  275,  276,  277,  278,  279,  280,  281,
  282,  294,    0,  298,    0,    0,  285,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  191,    0,  193,    0,
    0,    0,  219,    0,  198,  207,    0,    0,    0,    0,
    0,  274,  171,  182,    0,  210,  202,  204,  286,  289,
  292,  287,  290,  293,    0,    0,    0,    0,    0,   11,
   12,   34,   28,   27,   32,   26,   33,   29,   30,   31,
   35,   36,    0,    0,    3,    0,    0,    0,    9,    0,
   25,    0,    0,    0,  133,  124,    0,  117,  209,  203,
  206,  211,  230,  231,  232,  243,  244,  245,  237,  238,
  236,  239,  240,  241,  242,  233,  234,  235,  229,    0,
  165,  266,  220,    0,    0,    0,  221,    0,    0,  248,
  249,    0,  250,  251,  252,  253,    0,  222,    0,  223,
    0,  224,    0,  254,  255,    0,  256,  257,    0,  258,
  259,  260,  261,    0,  262,  263,  264,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  158,  135,  136,
  137,    0,    0,    0,    0,    0,    0,    0,    0,  140,
  147,    0,  160,  164,    0,    0,  295,  301,  299,  283,
  284,  153,  154,  157,  155,  156,    0,  159,    0,    0,
    0,  130,    0,    0,    0,    0,  125,    0,   47,   42,
    0,   44,   24,    0,   38,    0,   45,    0,    0,    0,
    0,   17,    0,    0,    0,  194,   87,    0,    0,    0,
    0,    0,    0,    0,    0,   51,    0,   54,    0,   58,
    0,    0,    0,    0,    0,    0,    0,    0,   78,    0,
    0,    0,    0,    0,    0,    0,   96,  104,    0,  103,
  190,  181,    0,  213,    0,    0,    0,  215,  162,  138,
  163,    0,    0,    0,    0,    0,    0,  139,    0,    0,
    0,    0,    0,    0,  189,    0,    0,    0,    0,   49,
   89,  129,  127,  128,    0,   46,    0,   37,    0,  195,
   80,   19,    0,    0,   22,   23,   16,   15,    0,    0,
   14,  123,    0,    0,    0,    0,  118,  116,    0,    0,
    0,    0,  111,    0,    0,  110,    0,    0,    0,    0,
  105,   84,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  212,  142,  141,  144,    0,  149,
  148,  151,    0,  126,    0,   43,   21,   18,    0,    0,
   10,   13,  122,  120,  121,    0,  115,  113,  114,    0,
   53,   86,  109,  107,  108,    0,   95,    0,    0,    0,
    0,   90,  102,    0,    0,    0,    0,   97,  217,    0,
  218,  214,  143,  150,    0,   20,    2,  119,  112,  106,
   94,   92,   93,    0,  101,   99,  100,    0,  216,   91,
   98,
};
short yyIsParser::yydgoto[] = {                                      42,
  163,  388,  345,  292,  165,  166,  167,  301,  168,  169,
  170,  390,  391,  302,  384,  385,   44,  293,  171,  294,
  295,  296,  297,   45,   46,  200,   47,   48,  206,   49,
  208,   50,   51,   52,  212,   53,  217,   54,  219,   55,
  221,   56,  223,   57,  226,   58,  229,   59,  234,   60,
  238,   61,   62,   63,   64,   65,  248,   66,   67,   68,
   69,   70,  350,   71,   72,   73,   74,   75,   76,   77,
  201,   78,   79,   80,   81,   82,   83,   84,   85,  172,
   86,   87,   88,   89,   90,   91,  347,  348,   92,   93,
   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
  104,  105,
};
short yyIsParser::yysindex[] = {                                   3702,
 -262,  -26,  -26,  -22,    0,    0,    0,    0,    0,    0,
   16,    0, 1455,  -60,    0,    0,    0,    0,    0,    0,
    3,    0,    0,    0,    0,    0,    0, -170,    0,    0,
    0, -165, 2766,    0, 2666,   16, 4092, 4243,    3, -338,
    0,    0,    0,    0,    0,  991,    0,   -6, -321,    0,
 3941, -209,    6,  -10,   -7,  162, -195,   41,  154, -126,
    0,    0, 4028,   63,  -37,    0,   95,   95,   95,    9,
   83,   95,    0,   95,  -40,    0,  -22,    0,    0, -191,
    0, -127,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -182,    0, -177, -175,    0, -161, 4142, -155,
 -152, 3702, -102,  -94,  -93,   95,    0,   95,    0,  -29,
   95,   95,    0,  231,    0,    0,  -90,  -40,   16, -170,
  111,    0,    0,    0, 3702,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -43, 3702,  -76,  -85,   96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  232,  237,    0,  188,  188,  188,    0,  160,
    0,  243,   95, 2913,    0,    0, 3061,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 3849,
    0,    0,    0, 3849, 3849, 3849,    0, 3849, -209,    0,
    0, 3941,    0,    0,    0,    0, 3941,    0, 3941,    0,
 3941,    0, 3941,    0,    0, 3941,    0,    0, 3941,    0,
    0,    0,    0, 3941,    0,    0,    0, 3941,   63,  194,
 3160,   16, 4330, 4179,   16, 4142,  373,    0,    0,    0,
    0,   51,   16,  -26,  -33,   51,   16,  -26,   56,    0,
    0,   16,    0,    0,   16,   16,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 3849,    0,  -90,  -61,
  202,    0,  203,  206,  210, 3702,    0, -327,    0,    0,
    0,    0,    0, -219,    0,  -42,    0, 3702, 3941, 3555,
  188,    0,  188,  188,  634,    0,    0,   59, 3702,  -38,
  -58,   86, 3702,  -27,  -47,    0,  257,    0, -321,    0,
    6,  -10,   -7,  162, -195,   41,  154, -126,    0, 3702,
  118, 3702,   -8,  -46,   95, 3308,    0,    0, 3455,    0,
    0,    0, -252,    0,   65,  259,  158,    0,    0,    0,
    0,  -90,  -61,   95,   95,  278,  -25,    0,  -90,  -61,
   95,   95,  278,  -13,    0,  -90,  -61,  -90,  -61,    0,
    0,    0,    0,    0,  252,    0,   -2,    0, -327,    0,
    0,    0, 3849,   25,    0,    0,    0,    0, -327,  502,
    0,    0,  255,  256,  260, 3702,    0,    0,  273,  288,
  291, 3702,    0, 3849,  294,    0,  298,  300,  301, 3702,
    0,    0,  119, 3702,   48,  -45,  122, 3702,   50,  -32,
 3702,  344, 3702,  443,    0,    0,    0,    0,  278,    0,
    0,    0,  278,    0, -327,    0,    0,    0, 3849,  350,
    0,    0,    0,    0,    0,  319,    0,    0,    0,  325,
    0,    0,    0,    0,    0,  332,    0,  333,  340,  341,
 3702,    0,    0,  353,  356,  358, 3702,    0,    0, 3702,
    0,    0,    0,    0,  -42,    0,    0,    0,    0,    0,
    0,    0,    0,  360,    0,    0,    0,  365,    0,    0,
    0,
};
short yyIsParser::yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  522,    0,    0,
    0,  593,    0,    0,    0, 1424,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1917,    0,  116,   29,    0,
    0,  809,  101,   44, 2470, 2226, 2394, 2341, 2220, 2088,
    0,    0,    0, 1982,    0,    0,    0,    0,    0, 1283,
 1348,    0, 1218,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  660,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  725,    0,  794,    0,    0,    0,    0,  -24,
  -16,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  125,
 1153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  419,    0,    0,  -19,    0,   -3,    0,    0,
    0,    0, 1600,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1527,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2035,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1665,    0,    0,    0, 1783,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  423,  424,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  860,    0,    0,    0,    0,  -36,    0,    0,    0,    0,
   42,    0,   49,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  253,    0,
 1529, 1062, 2523, 2400, 2450, 2354, 2285, 2153,    0,    0,
    0,    0,    0,    0, 1848,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  425,  429,    0,    0,    0,    0,    0,  435,  438,
    0,    0,    0,    0,    0,  441,  444,  456,  459,    0,
    0,    0,    0,    0,    0,    0,  -31,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
short yyIsParser::yygindex[] = {                                      0,
    1,    0,   17, -176,    0,    0,    0,   37,    0,    0,
    0,    0,  110, -106,    0, -307,  275,    0,    0,    0,
  208,   68,    0,    0,    2,  380, -136,    0,    0,  299,
    0,  309,    0,  455,    0,  295,    0,  303,    0,  304,
    0,  306,    0,  302,    0,  305,    0,  318,    0,  296,
    0, -179,    0,    0,  472,   97, 1676,   91,    0,    0,
    0,   78,  282,  810,  227,   15,  241,  271,  -11,    0,
    0,    0,    0,    0,    0,    0,    0,   92,  287,  250,
    0,    0,    0,    0,    0,    0,    0,  126,  -14,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,    0,
  446,    0,
};
#define YYTABLESIZE 4735
short yyIsParser::yytable[] = {                                     247,
   43,  134,  247,   41,   41,  124,  112,  287,   40,   40,
  247,   39,   39,  112,  131,  207,  117,  117,  283,   39,
    4,    4,  136,  219,   41,  117,  205,  133,   57,   40,
  135,  202,   39,  148,  397,  137,    8,    8,  131,  131,
  179,    4,  112,   65,   39,  403,  411,  462,  247,  282,
  117,  164,  131,  180,   41,  112,  204,    8,  329,   40,
  468,   57,   39,  316,  131,  215,  123,  216,  439,   57,
  141,  207,   57,  289,  144,  437,   65,  376,  264,  114,
  114,    6,    6,  227,   65,  228,   57,   65,    5,    5,
  112,   57,   39,    7,    7,  112,  288,  134,  113,  120,
   63,   65,    6,   65,  112,   65,   65,  127,  242,    5,
  131,  377,  138,  218,    7,   55,  202,  438,  220,  381,
  393,   57,  247,  133,  301,  421,  243,  176,  178,  288,
  181,  476,  173,   63,  247,  281,   65,   39,  106,  107,
  370,   63,  108,  117,   63,  267,  284,  399,  289,  290,
  124,  392,  376,  241,  244,  265,   55,  301,   63,   55,
  301,  301,  301,   63,  301,  301,  301,  301,  301,  301,
  301,  301,  141,   55,  311,  210,  211,  315,  398,  407,
  458,  289,  301,  464,  301,  376,  301,  301,  301,  232,
  233,  224,  225,   63,  387,  230,  387,  387,  425,  222,
  231,  424,  436,  303,  304,  131,  131,  131,   55,  131,
  406,  457,  440,  131,  463,  301,  301,  301,  131,  266,
  131,   31,  131,  268,  131,  279,  270,  131,  116,  121,
  131,  139,  140,   31,  342,  131,  142,  143,   31,  131,
  271,  334,  118,  122,  131,  131,  139,  131,  301,  142,
  301,  246,   56,  349,  253,  257,  117,  349,  245,  117,
  133,  117,  235,  236,  237,  286,  351,  117,  117,  117,
  351,  117,  117,  117,  285,  298,  117,  299,  300,  117,
  117,  128,  305,  306,  330,   56,  375,  262,  119,  119,
  125,  199,  396,   56,  371,  372,   56,  119,  373,  125,
  131,  131,  374,  402,  410,  461,  379,  125,  262,  394,
   56,  245,  395,  400,  404,   56,  246,  112,  467,  423,
  356,  389,  119,  401,  246,  125,  182,  109,  429,  207,
  405,  354,  408,  337,  340,  361,  416,  219,  335,  420,
  433,  341,  409,  346,  434,   56,  435,  443,  444,  352,
  113,  357,  445,  359,  113,  364,  252,  253,  365,  117,
  254,  366,  368,  125,   41,  447,   21,  126,   41,   40,
  428,  123,   39,   40,  110,   29,   39,  432,  111,   57,
  448,    4,  123,  449,  131,    4,  452,  203,  213,  214,
  453,   21,  454,  455,   65,  125,  446,    8,  460,  280,
  466,    8,  450,  126,  470,  131,  389,  123,  477,  363,
  456,  478,  112,  344,  459,  119,  126,  479,  465,  240,
  123,  469,   57,  471,  480,  481,   65,   65,   65,   65,
  256,  257,  482,  483,  258,  125,   65,   65,  117,   21,
  131,  422,    6,  473,  288,  485,    6,  474,  486,    5,
  487,   63,  490,    5,    7,  123,  126,  491,    7,  196,
  123,  484,  174,  173,  180,  126,   55,  488,  178,  123,
  489,  301,  301,  301,  188,  301,  301,  186,  317,  318,
  176,  301,  112,  175,   21,   63,   63,   15,   16,   17,
   18,   19,   20,   63,   63,  184,  289,  290,  183,  442,
  291,  378,  475,  277,  319,  209,  321,  301,  301,  301,
  301,  301,  301,  301,  301,  301,  320,  301,  301,  322,
  346,  301,  323,  353,  325,  301,  324,  360,  119,  328,
  326,  119,  125,  119,  239,  367,  369,  358,  125,  119,
  119,  119,  125,  119,  119,  119,  327,  380,  119,  472,
  269,  119,  119,    0,  301,    0,    0,  301,  301,  301,
    0,  207,  301,  301,  301,  301,  301,  301,  301,    0,
    0,    0,    0,    0,  386,    0,    0,    0,    0,  301,
    0,  301,    0,  301,  301,  301,    0,    0,    0,  183,
  184,  185,  219,  186,  187,  188,  189,  190,  191,  192,
  193,  194,  195,   56,  196,  197,  198,    0,    0,    0,
    0,    0,  301,  301,  301,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  219,  441,    0,  219,  219,
  219,  119,  219,  219,  219,  219,  219,  219,  219,  219,
    0,    0,    0,    0,    0,  301,   56,  301,    0,    0,
  219,    0,  219,  219,  219,  219,  219,  386,    0,  198,
  343,    0,  150,  151,    0,    0,  152,  153,  154,  155,
  156,    0,  157,  158,  159,  160,  161,  162,  451,    0,
    0,    0,    0,  219,  219,  219,    0,    0,    0,    0,
    0,    0,  198,    0,    0,  198,  198,  198,    0,  193,
  198,  198,  198,  198,  198,  198,  198,    0,    0,    0,
  119,    0,    0,  386,    0,    0,  219,  198,  219,  198,
  198,  198,  198,  198,  296,    0,    0,    0,    0,    0,
  343,    0,  150,  151,    0,    0,  152,  153,  154,  155,
  156,    0,  157,  158,  159,  160,  161,  162,    0,    0,
  198,  198,  198,    0,    0,    0,    0,  296,    0,    0,
  296,  296,  296,    0,  296,  296,  296,  296,  296,  296,
  296,  296,    0,  126,    0,    0,    0,  123,    0,    0,
    0,    0,  296,  198,  296,  198,  296,  296,  296,  343,
    0,  150,  151,  300,    0,  152,  153,  154,  155,  156,
    0,  157,  158,  159,  160,  161,  162,    0,   61,    0,
    0,  115,  115,    0,    0,  296,  296,  296,    0,    0,
    0,    0,  132,    0,    0,    0,  300,    0,    0,  300,
  300,  300,    0,  300,  300,  300,  300,  300,  300,  300,
  300,   61,    0,  126,    0,    0,    0,  123,  296,   61,
  296,  300,   61,  300,    0,  300,  300,  300,    0,    0,
    0,    0,    0,    0,    0,    0,   61,    0,    0,    0,
  207,   61,  301,    0,    0,  207,    0,    0,  301,    0,
    0,    0,    0,    0,  300,  300,  300,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   46,   61,    0,    0,  301,  301,  301,  301,  301,  301,
  301,  301,  301,    0,  301,  301,    0,  300,  132,  300,
  219,  343,  301,  150,  151,    0,    0,  152,  153,  154,
  155,  156,    0,  157,  158,  159,  160,  161,  162,  219,
  219,  219,    0,  219,  219,    0,  219,    0,    0,  219,
   46,  219,  219,  219,    0,  219,  219,  219,  219,  219,
  219,  219,  219,  219,  219,    0,  219,  219,  219,  219,
  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,  219,  219,    0,  219,  219,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  193,    0,
  198,    0,    0,  193,    0,    0,  198,    0,  198,  198,
  198,    0,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  198,    0,  198,  198,  198,  198,  198,  198,  198,
  198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
  198,  199,  198,  198,    0,  132,    0,    0,    0,    0,
    0,   64,    0,  355,    0,    0,    0,  362,    0,    0,
    0,  296,  296,  296,    0,  296,  296,    0,    0,    0,
    0,  296,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
    0,    0,   64,    0,    0,   64,    0,  296,  296,  296,
  296,  296,  296,  296,  296,  296,    0,  296,  296,   64,
    0,   64,    0,   64,   64,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  300,  300,  300,    0,  300,  300,    0,    0,    0,    0,
  300,    0,  166,    0,   64,    0,    0,    0,    0,   61,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  300,  300,  300,  300,
  300,  300,  300,  300,  300,  166,  300,  300,  166,  166,
  166,    0,  166,  166,  166,  166,  166,  166,  166,  166,
    0,   61,   61,    0,    0,    0,    0,    0,   46,    0,
  166,    0,  166,    0,  166,  166,  166,  171,  219,  219,
  219,    0,  219,  219,  219,  219,  219,  219,  219,  219,
  219,  219,    0,  219,  219,  219,    0,    0,    0,    0,
    0,    0,    0,  166,  166,  166,    0,    0,    0,    0,
  171,    0,    0,  171,  171,  171,    0,  191,  171,  171,
  171,  171,  171,  171,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  171,  166,  171,  166,  171,
  171,  171,  146,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  171,  171,
  171,    0,    0,    0,    0,  146,    0,    0,  146,  146,
  146,    0,    0,  146,  146,  146,  146,  146,  146,  146,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  146,  171,  146,  171,  146,  146,  146,  274,    0,  183,
  184,  185,    0,  186,  187,  188,  189,  190,  191,  192,
  193,  194,  195,    0,  196,  197,  198,   15,   16,   17,
   18,   19,   20,  146,  146,  146,    0,    0,    0,    0,
  274,    0,    0,  274,  274,  274,    0,    0,  274,  274,
  274,  274,  274,  274,  274,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  274,  146,  274,  146,  274,
  274,  274,   64,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  132,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  274,  274,
  274,    0,    0,    0,   64,   64,   64,   64,    0,    0,
    0,    0,    0,    0,   64,   64,  132,    0,    0,  132,
  132,  132,    0,    0,  132,  132,  132,  132,  132,  132,
  132,  274,    0,  274,    0,    0,    0,    0,    0,    0,
    0,  132,    0,  132,    0,  132,  132,  132,    0,    0,
    0,    0,   40,    0,  112,    0,   39,    0,    0,  166,
  166,  166,    0,  166,  166,    0,    0,    0,    0,  166,
    0,    0,    0,    0,  132,  132,  132,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   60,    0,   62,    0,
    0,    0,    0,    0,    0,  166,  166,  166,  166,  166,
  166,  166,  166,  166,    0,  166,  166,  132,    0,  132,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   60,
    0,   62,    0,    0,    0,    0,  191,   60,  171,   62,
   60,  191,   62,    0,  171,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   60,    0,   62,    0,    0,   60,
    0,   62,    0,    0,    0,    0,    0,    0,    0,   88,
  171,  171,  171,  171,  171,  171,  171,  171,  171,    0,
  171,  171,    0,    0,    0,    0,    0,    0,    0,   60,
    0,   62,    0,    0,    0,    0,    0,    0,    0,  177,
    0,    0,   88,  146,    0,   88,   88,   88,    0,  146,
   88,   88,   88,   88,   88,   88,   88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   88,    0,   88,
    0,   88,   88,   88,  145,  146,  146,  146,  146,  146,
  146,  146,  146,  146,    0,  146,  146,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   88,   88,   88,    0,  185,    0,    0,  145,  274,    0,
  145,  145,  145,    0,  274,  145,  145,  145,  145,  145,
  145,  145,    0,    1,    0,    0,    0,    0,    0,    0,
    0,    0,  145,   88,  145,   88,  145,  145,  145,    0,
  274,  274,  274,  274,  274,  274,  274,  274,  274,    0,
  274,  274,  249,  250,  251,  255,  259,  260,    0,  261,
  263,    0,    0,    0,    0,  145,  145,  145,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8,  132,    9,   10,    0,    0,    0,
  132,    0,  152,    0,    0,    0,    0,    0,  145,    0,
  145,  272,    0,  273,    0,  274,  275,  276,    0,    0,
    0,  129,    0,  278,    0,    0,  132,  132,  132,  132,
  132,  132,  132,  132,  132,  152,  132,  132,  152,  152,
  152,    0,    0,  152,  152,  152,  152,  152,  152,  152,
    0,   15,   16,   17,   18,   19,   20,    0,    0,    0,
  152,    0,  152,   21,  152,  152,  152,   85,  307,   23,
   24,   25,   26,   27,    0,  130,   29,   30,   31,   32,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  152,  152,  152,    0,   60,    0,   62,
   85,    0,    0,   85,   85,   85,    0,    0,   85,   85,
   85,   85,   85,   85,   85,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   85,  152,   85,  152,   85,
   85,   85,    0,   62,   62,    0,  166,    0,    0,   60,
   60,   62,   62,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   85,   85,
   85,    0,    0,    0,    0,    0,    0,    0,    0,  166,
   88,    0,  166,  166,  166,    0,   88,  166,  166,  166,
  166,  166,  166,  166,    0,    0,    0,    0,    0,    0,
    0,   85,    0,   85,    0,    0,  166,    0,  166,  166,
  166,   83,   88,   88,   88,   88,   88,   88,   88,   88,
   88,    0,   88,   88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  166,  166,  166,
  412,    0,    0,    0,   83,  145,    0,   83,   83,   83,
    0,  145,   83,   83,   83,   83,   83,    0,   83,  426,
  427,    0,    0,    0,   82,    0,  430,  431,    0,   83,
  166,   83,  166,   83,   83,    0,    0,  145,  145,  145,
  145,  145,  145,  145,  145,  145,    0,  145,  145,    0,
    0,    0,    0,    0,    0,    0,    0,   82,    0,    0,
   82,   82,   82,    0,   83,   82,   82,   82,   82,   82,
    0,   82,    0,    0,    0,    0,    0,   77,    0,    0,
    0,    0,   82,    0,   82,    0,   82,   82,    0,    0,
    0,    0,    0,    0,    0,   83,    0,   83,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77,    0,    0,   77,   77,   77,    0,   82,   77,   77,
   77,   77,   77,  152,   77,    0,    0,    0,    0,  152,
    0,    0,    0,    0,    0,   77,    0,   77,    0,   77,
   77,    0,   76,    0,    0,    0,    0,    0,   82,    0,
   82,    0,    0,    0,    0,  152,  152,  152,  152,  152,
  152,  152,  152,  152,    0,  152,  152,    0,    0,    0,
   77,    0,    0,    0,    0,   76,    0,    0,   76,   76,
   76,    0,    0,   76,   76,   76,   76,   76,   85,   76,
    0,    0,    0,    0,   85,    0,    0,    0,    0,    0,
   76,   77,   76,   77,   76,   76,    0,    0,    0,   75,
    0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
   85,   85,   85,   85,   85,   85,   85,   85,   85,    0,
   85,   85,    0,    0,    0,   76,    0,    0,    0,    0,
    0,    0,   75,    0,    0,    0,    0,   75,   69,    0,
   75,    0,   75,   75,   75,    0,   69,  166,    0,   69,
    0,    0,    0,  166,    0,    0,   76,   75,   76,   75,
    0,   75,   75,   69,   74,   69,    0,   69,   69,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  166,
  166,  166,  166,  166,  166,  166,  166,  166,    0,  166,
  166,    0,   75,    0,    0,    0,    0,   74,   69,    0,
    0,    0,   74,    0,    0,   74,    0,   74,   74,   74,
    0,    0,   83,    0,    0,    0,    0,    0,    0,    0,
   73,    0,   74,   75,   74,   75,   74,   74,    0,   69,
    0,   69,    0,   72,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   83,   83,   83,   83,   83,   83,
   83,   83,   83,   73,   83,   83,    0,   74,   73,    0,
    0,   73,    0,    0,   73,   82,   72,    0,    0,    0,
    0,   72,    0,   71,   72,    0,    0,   72,   73,   68,
   73,    0,   73,   73,    0,    0,    0,    0,   74,    0,
   74,   72,    0,   72,    0,   72,   72,   82,   82,   82,
   82,   82,   82,   82,   82,   82,   71,   82,   82,    0,
    0,   71,   68,   73,   71,    0,    0,   71,   77,    0,
   68,    0,    0,   68,    0,    0,   72,    0,    0,   70,
    0,   71,    0,   71,    0,   71,   71,   68,    0,   68,
    0,   68,   68,    0,   73,    0,   73,    0,    0,   67,
   77,   77,   77,   77,   77,   77,    0,   72,    0,   72,
   77,   77,   70,    0,    0,    0,   71,   70,    0,    0,
   70,    0,   68,   70,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   76,    0,    0,    0,   70,    0,   70,
   67,   70,   70,   67,    0,    0,    0,   71,    0,   71,
    0,    0,   66,   68,    0,   68,    0,   67,    0,   67,
    0,   67,   67,    0,    0,   76,   76,   76,   76,   76,
   76,    0,   70,    0,    0,   76,   76,    0,    0,    0,
    0,    0,    0,    0,    0,   66,    0,    0,    0,    0,
    0,    0,   67,   66,    0,    0,   66,    0,    0,    0,
   75,    0,    0,   70,    0,   70,   69,    0,    0,    0,
   66,    0,   66,    0,   66,   66,    0,    0,    0,    0,
    0,    0,    0,   67,    0,    0,    0,    0,    0,    0,
    0,    0,   75,   75,   75,   75,   75,   75,   69,   69,
   69,   69,   75,   75,    0,   66,    0,    0,   69,   69,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   74,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   74,   74,   74,
   74,   74,   74,    0,    0,    0,    0,   74,   74,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,    0,    0,    0,   34,    0,
    0,    0,    0,   40,   72,   35,    0,   39,    0,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,   73,   73,   73,   73,   73,   37,
    0,    0,    0,   73,   73,    0,   72,   72,   72,   72,
   72,   72,    0,    0,   71,    0,   72,   72,    0,    0,
   68,    0,    0,    0,    0,    0,   33,   38,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   71,   71,   71,   71,
    0,    0,   68,   68,   68,   68,   71,   71,    0,    0,
    0,   41,   68,   68,    0,    0,    0,    0,   34,    0,
   70,    0,    0,   40,    0,   35,    0,   39,    0,    0,
    0,   36,    0,    0,    0,    0,    0,    0,    0,    0,
   67,    0,    0,    0,    0,  147,    0,    0,  146,   37,
    0,    0,   70,   70,   70,   70,    0,    0,    0,    0,
    0,    0,   70,   70,    0,    0,    0,    0,    0,    0,
    0,    0,   67,   67,   67,   67,   33,   38,    0,    0,
    0,    0,   67,   67,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   66,   66,   66,   66,    0,
    0,    0,    0,    0,    0,   66,   66,    0,    0,    0,
    0,    0,    0,    0,    1,    2,    3,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
   40,    0,   35,  149,   39,  150,  151,    0,   36,  152,
  153,  154,  155,  156,    0,  157,  158,  159,  160,  161,
  162,    0,  310,    0,    0,  309,   37,    0,    0,    0,
    0,    5,    6,    7,    8,    0,    9,   10,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   33,   38,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   11,   12,    0,    0,    0,   13,
    0,    0,   14,    0,    1,    2,    3,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   41,    0,
    0,    0,   15,   16,   17,   18,   19,   20,    0,    0,
    0,    0,    0,    4,   21,    0,    0,   22,    0,    0,
   23,   24,   25,   26,   27,    0,   28,   29,   30,   31,
   32,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    5,    6,    7,    8,    0,    9,   10,    0,    0,
    0,    0,    0,   34,    0,    0,    0,    0,   40,    0,
   35,    0,   39,    0,    0,    0,   36,    0,    0,    0,
    0,    0,    0,    0,   11,   12,  145,    0,    0,   13,
  314,    0,   14,  313,   37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   15,   16,   17,   18,   19,   20,    0,    0,
    0,   33,   38,    0,   21,    0,    0,   22,    0,    0,
   23,   24,   25,   26,   27,    0,   28,   29,   30,   31,
   32,    1,    2,    3,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,    0,    0,    0,
    0,    0,   34,    0,    0,    0,    0,   40,    0,   35,
    4,   39,    0,    0,    0,   36,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  333,
    0,    0,  332,   37,    0,    0,    0,    0,    5,    6,
    7,    8,    0,    9,   10,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   33,   38,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   11,   12,  308,    0,    0,   13,    0,    0,   14,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   41,    0,    0,    0,   15,
   16,   17,   18,   19,   20,    0,    0,    0,    0,    0,
    0,   21,    0,    0,   22,    0,    0,   23,   24,   25,
   26,   27,    0,   28,   29,   30,   31,   32,    0,    1,
    2,    3,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   34,    0,    0,    0,    0,   40,    0,   35,    4,   39,
    0,    0,    0,   36,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  415,    0,    0,
  414,   37,    0,    0,    0,    0,    5,    6,    7,    8,
    0,    9,   10,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   33,   38,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
   12,  312,    0,    0,   13,    0,    0,   14,    1,    2,
    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   41,    0,    0,    0,   15,   16,   17,
   18,   19,   20,    0,    0,    0,    0,    4,    0,   21,
    0,    0,   22,    0,    0,   23,   24,   25,   26,   27,
    0,   28,   29,   30,   31,   32,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    5,    6,    7,    8,    0,
    9,   10,    0,    0,    0,    0,    0,   34,    0,    0,
    0,    0,   40,    0,   35,    0,   39,    0,    0,    0,
   36,    0,    0,    0,    0,    0,    0,    0,   11,   12,
  331,    0,    0,   13,  419,    0,   14,  418,   37,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,   16,   17,   18,
   19,   20,    0,    0,    0,   33,   38,    0,   21,    0,
    0,   22,    0,    0,   23,   24,   25,   26,   27,    0,
   28,   29,   30,   31,   32,    0,    1,    2,    3,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,    0,    0,    0,    0,    0,    0,   34,    0,    0,
    0,    0,   40,    0,   35,    4,   39,    0,  383,    0,
   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
    0,    0,    0,    5,    6,    7,    8,    0,    9,   10,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   33,   38,  382,    0,    0,
    0,    0,    0,    0,    0,    0,   11,   12,  413,    0,
    0,   13,    0,    0,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   41,    0,    0,    0,   15,   16,   17,   18,   19,   20,
    0,    0,    0,    0,    0,    0,   21,    0,    0,   22,
    0,    0,   23,   24,   25,   26,   27,    0,   28,   29,
   30,   31,   32,    1,    2,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   34,    0,    0,    0,    0,   40,
    0,   35,    4,   39,    0,    0,    0,   36,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
    5,    6,    7,    8,    0,    9,   10,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   33,   38,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   11,   12,  417,    0,    0,   13,    0,
    0,   14,    0,    1,    2,    3,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   41,    0,    0,
    0,   15,   16,   17,   18,   19,   20,    0,    0,    0,
    0,    0,    0,   21,    0,    0,   22,    0,    0,   23,
   24,   25,   26,   27,    0,   28,   29,   30,   31,   32,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    5,    6,    7,    8,    0,    9,   10,    0,    0,    0,
    0,   34,    0,    0,    0,    0,   40,    0,   35,    0,
   39,    0,    0,    0,   36,    0,    0,    0,    0,    0,
    0,    0,    0,   11,   12,    0,    0,    0,   13,    0,
    0,   14,   37,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   15,   16,   17,   18,   19,   20,    0,    0,   33,
   38,    0,    0,   21,    0,    0,   22,    0,    0,   23,
   24,   25,   26,   27,    0,   28,   29,   30,   31,   32,
    1,    2,    3,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   41,    0,    0,    0,   40,    0,
   35,    0,   39,    0,    0,    0,   36,    0,    0,    4,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    5,    6,    7,
    8,    0,    9,   10,    0,    0,    0,    0,    0,    0,
    0,   33,   38,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   11,   12,    0,    0,    0,   13,    0,    0,   14,    0,
    0,    0,    0,    0,    0,   40,   41,  112,    0,   39,
    0,    0,    0,   36,    0,    0,    0,    0,   15,   16,
   17,   18,   19,   20,    0,    0,    0,    0,    0,    0,
   21,   37,    0,   22,    0,    0,   23,   24,   25,   26,
   27,    0,   28,   29,   30,   31,   32,    1,    2,    3,
    0,    0,    0,    0,    0,    0,    0,    0,   33,   38,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   40,
    0,  112,    0,   39,    0,    0,    0,  175,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    5,    6,    7,    8,    0,    9,
   10,    0,    0,    0,    0,    0,    0,    0,    0,   40,
    0,  112,  174,   39,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,   12,    1,
    2,    3,   13,    0,    0,   14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   40,    0,  112,    0,
   39,    0,    0,    0,    0,   15,   16,   17,   18,   19,
   20,    0,    0,    0,    0,    0,    0,   21,    0,    0,
   22,    0,    0,   23,   24,   25,   26,   27,    0,   28,
   29,   30,   31,   32,    0,    0,    5,    6,    7,    8,
    0,    9,   10,    0,    0,    0,    0,    0,    0,  339,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   40,    0,  112,    0,   39,    0,    1,    2,    3,   11,
   12,    0,    0,    0,   13,    0,    0,   14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,   17,
   18,   19,   20,    0,    0,    0,    0,    0,    0,   21,
    0,    0,    0,  177,    0,   23,   24,   25,   26,   27,
    0,   28,   29,   30,   31,   32,    8,    0,    9,   10,
    1,    2,    3,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   40,    0,  112,
    0,   39,    0,    0,    0,    0,   11,   12,    0,    0,
    0,   13,    0,    0,   14,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    1,    0,    0,    0,   15,   16,   17,   18,   19,   20,
    8,    0,    9,   10,    0,    0,   21,    0,    0,    0,
  336,    0,   23,   24,   25,   26,   27,    0,   28,   29,
   30,   31,   32,    0,    0,    0,    0,    1,    2,    3,
   11,    0,    0,    0,    0,   13,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    8,    0,    9,   10,    0,    0,    0,    0,   15,   16,
   17,   18,   19,   20,    0,    0,    0,    0,    0,    0,
   21,    0,    0,    0,    0,    0,   23,   24,   25,   26,
   27,    0,   28,   29,   30,   31,   32,    8,    0,    9,
   10,    1,    2,    3,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   15,   16,
   17,   18,   19,   20,    0,    0,    0,   11,  338,    0,
   21,    0,   13,    0,    0,    0,   23,   24,   25,   26,
   27,    0,  130,   29,   30,   31,   32,    0,    0,    0,
    0,    0,    0,    0,    0,   15,   16,   17,   18,   19,
   20,    8,    0,    9,   10,    0,    0,   21,    0,    0,
    0,    0,    0,   23,   24,   25,   26,   27,    0,   28,
   29,   30,   31,   32,    0,    0,    0,    0,    1,    2,
    3,   11,    0,    0,    0,    0,   13,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   15,
   16,   17,   18,   19,   20,    0,    0,    0,    0,    0,
    0,   21,    0,    0,    0,    0,    0,   23,   24,   25,
   26,   27,    0,   28,   29,   30,   31,   32,    8,    0,
    9,   10,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
    0,    0,    0,   13,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,   16,   17,   18,
   19,   20,    0,    0,    0,    0,    0,    0,   21,    0,
    0,    0,    0,    0,   23,   24,   25,   26,   27,    0,
   28,   29,   30,   31,   32,
};
short yyIsParser::yycheck[] = {                                      40,
    0,   13,   40,   40,   41,    4,   40,   93,   40,   41,
   40,   40,   41,   40,   13,   40,    2,    3,   62,   42,
   40,   41,   21,   40,   61,   11,   33,   13,    0,   61,
   91,   46,   61,   33,   93,   21,   40,   41,   37,   38,
   39,   61,   40,    0,   42,   93,   93,   93,   40,   93,
   36,   35,   51,   39,   91,   40,   63,   61,  238,   91,
   93,   33,   91,  200,   63,   60,  405,   62,   44,   41,
   28,  393,   44,  401,   32,  383,   33,  405,   77,    2,
    3,   40,   41,   43,   41,   45,   58,   44,   40,   41,
   40,   63,   42,   40,   41,   40,  349,  109,    2,    3,
    0,   58,   61,   60,   40,   62,   63,   11,   46,   61,
  109,  288,   21,  124,   61,    0,  131,   93,  126,  299,
   62,   93,   40,  109,    0,   61,   64,   37,   38,  349,
   39,  439,   36,   33,   40,  135,   93,   42,  401,  402,
  277,   41,  405,  129,   44,  103,  146,   62,  401,  402,
  149,   93,  405,   91,   92,  347,   41,   33,   58,   44,
   36,   37,   38,   63,   40,   41,   42,   43,   44,   45,
   46,   47,  130,   58,  174,  385,  386,  177,   93,   62,
   62,  401,   58,   62,   60,  405,   62,   63,   64,   36,
   37,  387,  388,   93,  301,   42,  303,  304,   41,   38,
   47,   44,  379,  167,  168,  204,  205,  206,   93,  208,
   93,   93,  389,  212,   93,   91,   92,   93,  217,  347,
  219,  404,  221,  401,  223,  129,  402,  226,    2,    3,
  229,  402,  403,  404,  246,  234,  402,  403,  404,  238,
  402,  241,    2,    3,  243,  244,  402,  246,  124,  402,
  126,  354,    0,  252,  349,  349,  242,  256,  349,  245,
  246,  247,  389,  390,  391,  351,  252,  253,  254,  255,
  256,  257,  258,  259,  351,   44,  262,   41,   91,  265,
  266,   11,  123,   41,   91,   33,  286,  349,    2,    3,
    4,   61,  351,   41,   93,   93,   44,   11,   93,   13,
  299,  300,   93,  351,  351,  351,  349,   21,  349,  309,
   58,  349,  351,  313,   58,   63,  354,   40,  351,   61,
  354,  305,   36,  351,  354,   39,   40,  354,  354,  354,
  330,  254,  332,  243,  244,  258,  336,  354,  242,  339,
  354,  245,  351,  247,   93,   93,  349,   93,   93,  253,
  254,  255,   93,  257,  258,  259,  348,  349,  262,  345,
  352,  265,  266,   77,  401,   93,  389,  401,  405,  401,
  356,  405,  401,  405,  401,  402,  405,  363,  405,  351,
   93,  401,  405,   93,  383,  405,   93,  394,  383,  384,
   93,  389,   93,   93,  351,  109,  396,  401,  351,  129,
  351,  405,  402,  401,   61,  404,  390,  405,   59,  354,
  410,   93,   40,   41,  414,  129,  401,   93,  418,  357,
  405,  421,  394,  423,   93,   93,  383,  384,  385,  386,
  348,  349,   93,   93,  352,  149,  393,  394,  424,  389,
  439,  345,  401,  429,  349,   93,  405,  433,   93,  401,
   93,  351,   93,  405,  401,  405,  401,   93,  405,   41,
  405,  461,   40,   40,   40,  401,  351,  467,   40,  405,
  470,  347,  348,  349,   40,  351,  352,   40,  204,  205,
   40,  357,   40,   40,  389,  385,  386,  377,  378,  379,
  380,  381,  382,  393,  394,   40,  401,  402,   40,  390,
  405,  294,  435,  124,  206,   51,  212,  383,  384,  385,
  386,  387,  388,  389,  390,  391,  208,  393,  394,  217,
  424,    0,  219,  253,  223,  401,  221,  257,  242,  234,
  226,  245,  246,  247,   63,  265,  266,  256,  252,  253,
  254,  255,  256,  257,  258,  259,  229,  298,  262,  424,
  105,  265,  266,   -1,   33,   -1,   -1,   36,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,   58,
   -1,   60,   -1,   62,   63,   64,   -1,   -1,   -1,  359,
  360,  361,    0,  363,  364,  365,  366,  367,  368,  369,
  370,  371,  372,  351,  374,  375,  376,   -1,   -1,   -1,
   -1,   -1,   91,   92,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,  125,   -1,   36,   37,
   38,  345,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,  124,  394,  126,   -1,   -1,
   58,   -1,   60,   61,   62,   63,   64,  383,   -1,    0,
  288,   -1,  290,  291,   -1,   -1,  294,  295,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  404,   -1,
   -1,   -1,   -1,   91,   92,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,   40,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
  424,   -1,   -1,  439,   -1,   -1,  124,   58,  126,   60,
   61,   62,   63,   64,    0,   -1,   -1,   -1,   -1,   -1,
  288,   -1,  290,  291,   -1,   -1,  294,  295,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,   -1,   -1,
   91,   92,   93,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   36,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   46,   47,   -1,  401,   -1,   -1,   -1,  405,   -1,   -1,
   -1,   -1,   58,  124,   60,  126,   62,   63,   64,  288,
   -1,  290,  291,    0,   -1,  294,  295,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,   -1,    0,   -1,
   -1,    2,    3,   -1,   -1,   91,   92,   93,   -1,   -1,
   -1,   -1,   13,   -1,   -1,   -1,   33,   -1,   -1,   36,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,   46,
   47,   33,   -1,  401,   -1,   -1,   -1,  405,  124,   41,
  126,   58,   44,   60,   -1,   62,   63,   64,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,
  349,   63,  351,   -1,   -1,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   91,   92,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   93,   -1,   -1,  383,  384,  385,  386,  387,  388,
  389,  390,  391,   -1,  393,  394,   -1,  124,  109,  126,
   61,  288,  401,  290,  291,   -1,   -1,  294,  295,  296,
  297,  298,   -1,  300,  301,  302,  303,  304,  305,  347,
  348,  349,   -1,  351,  352,   -1,  354,   -1,   -1,  357,
   91,  359,  360,  361,   -1,  363,  364,  365,  366,  367,
  368,  369,  370,  371,  372,   -1,  374,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,
  351,   -1,   -1,  354,   -1,   -1,  357,   -1,  359,  360,
  361,   -1,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,  376,  377,  378,  379,  380,
  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,
  391,   61,  393,  394,   -1,  246,   -1,   -1,   -1,   -1,
   -1,    0,   -1,  254,   -1,   -1,   -1,  258,   -1,   -1,
   -1,  347,  348,  349,   -1,  351,  352,   -1,   -1,   -1,
   -1,  357,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,  383,  384,  385,
  386,  387,  388,  389,  390,  391,   -1,  393,  394,   58,
   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  347,  348,  349,   -1,  351,  352,   -1,   -1,   -1,   -1,
  357,   -1,    0,   -1,   93,   -1,   -1,   -1,   -1,  351,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
  387,  388,  389,  390,  391,   33,  393,  394,   36,   37,
   38,   -1,   40,   41,   42,   43,   44,   45,   46,   47,
   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,  349,   -1,
   58,   -1,   60,   -1,   62,   63,   64,    0,  359,  360,
  361,   -1,  363,  364,  365,  366,  367,  368,  369,  370,
  371,  372,   -1,  374,  375,  376,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   92,   93,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   36,   37,   38,   -1,   40,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,  124,   60,  126,   62,
   63,   64,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,
   93,   -1,   -1,   -1,   -1,   33,   -1,   -1,   36,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,  124,   60,  126,   62,   63,   64,    0,   -1,  359,
  360,  361,   -1,  363,  364,  365,  366,  367,  368,  369,
  370,  371,  372,   -1,  374,  375,  376,  377,  378,  379,
  380,  381,  382,   91,   92,   93,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   36,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,  124,   60,  126,   62,
   63,   64,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,
   93,   -1,   -1,   -1,  383,  384,  385,  386,   -1,   -1,
   -1,   -1,   -1,   -1,  393,  394,   33,   -1,   -1,   36,
   37,   38,   -1,   -1,   41,   42,   43,   44,   45,   46,
   47,  124,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   -1,   60,   -1,   62,   63,   64,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,  347,
  348,  349,   -1,  351,  352,   -1,   -1,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   91,   92,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,  124,   -1,  126,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
   -1,   33,   -1,   -1,   -1,   -1,  349,   41,  351,   41,
   44,  354,   44,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   -1,   58,   -1,   -1,   63,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,
  383,  384,  385,  386,  387,  388,  389,  390,  391,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  347,
   -1,   -1,   33,  351,   -1,   36,   37,   38,   -1,  357,
   41,   42,   43,   44,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,
   -1,   62,   63,   64,    0,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   92,   93,   -1,  347,   -1,   -1,   33,  351,   -1,
   36,   37,   38,   -1,  357,   41,   42,   43,   44,   45,
   46,   47,   -1,  259,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,  124,   60,  126,   62,   63,   64,   -1,
  383,  384,  385,  386,  387,  388,  389,  390,  391,   -1,
  393,  394,   67,   68,   69,   70,   71,   72,   -1,   74,
   75,   -1,   -1,   -1,   -1,   91,   92,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  319,  351,  321,  322,   -1,   -1,   -1,
  357,   -1,    0,   -1,   -1,   -1,   -1,   -1,  124,   -1,
  126,  116,   -1,  118,   -1,  120,  121,  122,   -1,   -1,
   -1,  347,   -1,  128,   -1,   -1,  383,  384,  385,  386,
  387,  388,  389,  390,  391,   33,  393,  394,   36,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,   46,   47,
   -1,  377,  378,  379,  380,  381,  382,   -1,   -1,   -1,
   58,   -1,   60,  389,   62,   63,   64,    0,  173,  395,
  396,  397,  398,  399,   -1,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   92,   93,   -1,  351,   -1,  351,
   33,   -1,   -1,   36,   37,   38,   -1,   -1,   41,   42,
   43,   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   58,  124,   60,  126,   62,
   63,   64,   -1,  385,  386,   -1,    0,   -1,   -1,  393,
  394,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,
   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
  351,   -1,   36,   37,   38,   -1,  357,   41,   42,   43,
   44,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  124,   -1,  126,   -1,   -1,   60,   -1,   62,   63,
   64,    0,  383,  384,  385,  386,  387,  388,  389,  390,
  391,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,   93,
  335,   -1,   -1,   -1,   33,  351,   -1,   36,   37,   38,
   -1,  357,   41,   42,   43,   44,   45,   -1,   47,  354,
  355,   -1,   -1,   -1,    0,   -1,  361,  362,   -1,   58,
  124,   60,  126,   62,   63,   -1,   -1,  383,  384,  385,
  386,  387,  388,  389,  390,  391,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   36,   37,   38,   -1,   93,   41,   42,   43,   44,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
   -1,   -1,   58,   -1,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  124,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   36,   37,   38,   -1,   93,   41,   42,
   43,   44,   45,  351,   47,   -1,   -1,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   58,   -1,   60,   -1,   62,
   63,   -1,    0,   -1,   -1,   -1,   -1,   -1,  124,   -1,
  126,   -1,   -1,   -1,   -1,  383,  384,  385,  386,  387,
  388,  389,  390,  391,   -1,  393,  394,   -1,   -1,   -1,
   93,   -1,   -1,   -1,   -1,   33,   -1,   -1,   36,   37,
   38,   -1,   -1,   41,   42,   43,   44,   45,  351,   47,
   -1,   -1,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   58,  124,   60,  126,   62,   63,   -1,   -1,   -1,    0,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,   -1,
  383,  384,  385,  386,  387,  388,  389,  390,  391,   -1,
  393,  394,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   33,   -1,
   41,   -1,   43,   44,   45,   -1,   41,  351,   -1,   44,
   -1,   -1,   -1,  357,   -1,   -1,  124,   58,  126,   60,
   -1,   62,   63,   58,    0,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  383,
  384,  385,  386,  387,  388,  389,  390,  391,   -1,  393,
  394,   -1,   93,   -1,   -1,   -1,   -1,   33,   93,   -1,
   -1,   -1,   38,   -1,   -1,   41,   -1,   43,   44,   45,
   -1,   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
    0,   -1,   58,  124,   60,  126,   62,   63,   -1,  124,
   -1,  126,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  383,  384,  385,  386,  387,  388,
  389,  390,  391,   33,  393,  394,   -1,   93,   38,   -1,
   -1,   41,   -1,   -1,   44,  351,   33,   -1,   -1,   -1,
   -1,   38,   -1,    0,   41,   -1,   -1,   44,   58,    0,
   60,   -1,   62,   63,   -1,   -1,   -1,   -1,  124,   -1,
  126,   58,   -1,   60,   -1,   62,   63,  383,  384,  385,
  386,  387,  388,  389,  390,  391,   33,  393,  394,   -1,
   -1,   38,   33,   93,   41,   -1,   -1,   44,  351,   -1,
   41,   -1,   -1,   44,   -1,   -1,   93,   -1,   -1,    0,
   -1,   58,   -1,   60,   -1,   62,   63,   58,   -1,   60,
   -1,   62,   63,   -1,  124,   -1,  126,   -1,   -1,    0,
  383,  384,  385,  386,  387,  388,   -1,  124,   -1,  126,
  393,  394,   33,   -1,   -1,   -1,   93,   38,   -1,   -1,
   41,   -1,   93,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,  351,   -1,   -1,   -1,   58,   -1,   60,
   41,   62,   63,   44,   -1,   -1,   -1,  124,   -1,  126,
   -1,   -1,    0,  124,   -1,  126,   -1,   58,   -1,   60,
   -1,   62,   63,   -1,   -1,  383,  384,  385,  386,  387,
  388,   -1,   93,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   41,   -1,   -1,   44,   -1,   -1,   -1,
  351,   -1,   -1,  124,   -1,  126,  351,   -1,   -1,   -1,
   58,   -1,   60,   -1,   62,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,  387,  388,  383,  384,
  385,  386,  393,  394,   -1,   93,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  124,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,
  386,  387,  388,   -1,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,
   -1,   -1,   -1,   38,  351,   40,   -1,   42,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  383,  384,  385,  386,  387,  388,   64,
   -1,   -1,   -1,  393,  394,   -1,  383,  384,  385,  386,
  387,  388,   -1,   -1,  351,   -1,  393,  394,   -1,   -1,
  351,   -1,   -1,   -1,   -1,   -1,   91,   92,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,
   -1,   -1,  383,  384,  385,  386,  393,  394,   -1,   -1,
   -1,  126,  393,  394,   -1,   -1,   -1,   -1,   33,   -1,
  351,   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,
   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  351,   -1,   -1,   -1,   -1,   60,   -1,   -1,   63,   64,
   -1,   -1,  383,  384,  385,  386,   -1,   -1,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  383,  384,  385,  386,   91,   92,   -1,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  351,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  383,  384,  385,  386,   -1,
   -1,   -1,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  259,  260,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,
   38,   -1,   40,  288,   42,  290,  291,   -1,   46,  294,
  295,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,   -1,   60,   -1,   -1,   63,   64,   -1,   -1,   -1,
   -1,  316,  317,  318,  319,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,   92,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  349,  350,   -1,   -1,   -1,  354,
   -1,   -1,  357,   -1,  259,  260,  261,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,
   -1,   -1,  377,  378,  379,  380,  381,  382,   -1,   -1,
   -1,   -1,   -1,  288,  389,   -1,   -1,  392,   -1,   -1,
  395,  396,  397,  398,  399,   -1,  401,  402,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,  317,  318,  319,   -1,  321,  322,   -1,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   -1,   46,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  349,  350,  351,   -1,   -1,  354,
   60,   -1,  357,   63,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  377,  378,  379,  380,  381,  382,   -1,   -1,
   -1,   91,   92,   -1,  389,   -1,   -1,  392,   -1,   -1,
  395,  396,  397,  398,  399,   -1,  401,  402,  403,  404,
  405,  259,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,
  288,   42,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   -1,   63,   64,   -1,   -1,   -1,   -1,  316,  317,
  318,  319,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  349,  350,  351,   -1,   -1,  354,   -1,   -1,  357,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,  377,
  378,  379,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,  392,   -1,   -1,  395,  396,  397,
  398,  399,   -1,  401,  402,  403,  404,  405,   -1,  259,
  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   33,   -1,   -1,   -1,   -1,   38,   -1,   40,  288,   42,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,   -1,   -1,
   63,   64,   -1,   -1,   -1,   -1,  316,  317,  318,  319,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,
  350,  351,   -1,   -1,  354,   -1,   -1,  357,  259,  260,
  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  126,   -1,   -1,   -1,  377,  378,  379,
  380,  381,  382,   -1,   -1,   -1,   -1,  288,   -1,  389,
   -1,   -1,  392,   -1,   -1,  395,  396,  397,  398,  399,
   -1,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,  317,  318,  319,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,   -1,   42,   -1,   -1,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,  350,
  351,   -1,   -1,  354,   60,   -1,  357,   63,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
  381,  382,   -1,   -1,   -1,   91,   92,   -1,  389,   -1,
   -1,  392,   -1,   -1,  395,  396,  397,  398,  399,   -1,
  401,  402,  403,  404,  405,   -1,  259,  260,  261,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   33,   -1,   -1,
   -1,   -1,   38,   -1,   40,  288,   42,   -1,   44,   -1,
   46,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   64,   -1,
   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,  322,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   91,   92,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  349,  350,  351,   -1,
   -1,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  126,   -1,   -1,   -1,  377,  378,  379,  380,  381,  382,
   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,  392,
   -1,   -1,  395,  396,  397,  398,  399,   -1,  401,  402,
  403,  404,  405,  259,  260,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   38,
   -1,   40,  288,   42,   -1,   -1,   -1,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,  350,  351,   -1,   -1,  354,   -1,
   -1,  357,   -1,  259,  260,  261,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  126,   -1,   -1,
   -1,  377,  378,  379,  380,  381,  382,   -1,   -1,   -1,
   -1,   -1,   -1,  389,   -1,   -1,  392,   -1,   -1,  395,
  396,  397,  398,  399,   -1,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  316,  317,  318,  319,   -1,  321,  322,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  349,  350,   -1,   -1,   -1,  354,   -1,
   -1,  357,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  377,  378,  379,  380,  381,  382,   -1,   -1,   91,
   92,   -1,   -1,  389,   -1,   -1,  392,   -1,   -1,  395,
  396,  397,  398,  399,   -1,  401,  402,  403,  404,  405,
  259,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,   38,   -1,
   40,   -1,   42,   -1,   -1,   -1,   46,   -1,   -1,  288,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,  317,  318,
  319,   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   91,   92,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  349,  350,   -1,   -1,   -1,  354,   -1,   -1,  357,   -1,
   -1,   -1,   -1,   -1,   -1,   38,  126,   40,   -1,   42,
   -1,   -1,   -1,   46,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
  389,   64,   -1,  392,   -1,   -1,  395,  396,  397,  398,
  399,   -1,  401,  402,  403,  404,  405,  259,  260,  261,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   92,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   40,   -1,   42,   -1,   -1,   -1,   46,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,  317,  318,  319,   -1,  321,
  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,
   -1,   40,   91,   42,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,  350,  259,
  260,  261,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,   -1,
   42,   -1,   -1,   -1,   -1,  377,  378,  379,  380,  381,
  382,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,
  392,   -1,   -1,  395,  396,  397,  398,  399,   -1,  401,
  402,  403,  404,  405,   -1,   -1,  316,  317,  318,  319,
   -1,  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   38,   -1,   40,   -1,   42,   -1,  259,  260,  261,  349,
  350,   -1,   -1,   -1,  354,   -1,   -1,  357,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,
  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,  389,
   -1,   -1,   -1,   91,   -1,  395,  396,  397,  398,  399,
   -1,  401,  402,  403,  404,  405,  319,   -1,  321,  322,
  259,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   40,
   -1,   42,   -1,   -1,   -1,   -1,  349,  350,   -1,   -1,
   -1,  354,   -1,   -1,  357,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  259,   -1,   -1,   -1,  377,  378,  379,  380,  381,  382,
  319,   -1,  321,  322,   -1,   -1,  389,   -1,   -1,   -1,
   91,   -1,  395,  396,  397,  398,  399,   -1,  401,  402,
  403,  404,  405,   -1,   -1,   -1,   -1,  259,  260,  261,
  349,   -1,   -1,   -1,   -1,  354,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,   -1,  321,  322,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,
  389,   -1,   -1,   -1,   -1,   -1,  395,  396,  397,  398,
  399,   -1,  401,  402,  403,  404,  405,  319,   -1,  321,
  322,  259,  260,  261,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,  378,
  379,  380,  381,  382,   -1,   -1,   -1,  349,  350,   -1,
  389,   -1,  354,   -1,   -1,   -1,  395,  396,  397,  398,
  399,   -1,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,  381,
  382,  319,   -1,  321,  322,   -1,   -1,  389,   -1,   -1,
   -1,   -1,   -1,  395,  396,  397,  398,  399,   -1,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,  259,  260,
  261,  349,   -1,   -1,   -1,   -1,  354,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  377,
  378,  379,  380,  381,  382,   -1,   -1,   -1,   -1,   -1,
   -1,  389,   -1,   -1,   -1,   -1,   -1,  395,  396,  397,
  398,  399,   -1,  401,  402,  403,  404,  405,  319,   -1,
  321,  322,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  349,   -1,
   -1,   -1,   -1,  354,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  377,  378,  379,  380,
  381,  382,   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,
   -1,   -1,   -1,   -1,  395,  396,  397,  398,  399,   -1,
  401,  402,  403,  404,  405,
};
#define YYFINAL 42
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 405
#if YYDEBUG
char *yyIsParser::yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'","'.'","'/'",0,
0,0,0,0,0,0,0,0,0,"':'","';'","'<'","'='","'>'","'?'","'@'",0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'['","'\\\\'","']'",0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"'{'","'|'","'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"XX_INCLUDE","XX_USING","XX_EXTERN","XX_FOREIGN","XX_NATIVE","XX_FRIEND",
"XX_PUBLIC","XX_PRIVATE","XX_PROTECTED","XX_CONST","XX_STATIC","XX_AUTO",
"XX_REGISTER","XX_VOLITILE","XX_INTERRUPT","XX_CDECL","XX_PASCAL","XX_PACKED",
"XX_PARALLEL","XX_REMOTE","XX_SHARED","XX_PURE","XX_VIRTUAL","XX_OPERATOR",
"XX_ABSOLUTE","XX_IO","XX_PROCESS","XX_MODULE","XX_MAIN","XX_THREAD",
"XX_SIGNAL","XX_CLASS","XX_NAMESPACE","XX_STRUCT","XX_UNION","XX_ARRAY",
"XX_SET","XX_STRING","XX_SIGNED","XX_UNSIGNED","XX_FLOAT","XX_VOID","XX_ENUM",
"XX_DOUBLE","XX_SHORT","XX_LONG","XX_INT","XX_CHAR","XX_BOOL","XX_TRUE",
"XX_FALSE","XX_WHAT","XX_AT","XX_IS","XX_SUPER","XX_THIS","XX_NEW","XX_DELETE",
"XX_POSITIONOF","XX_SIZEOF","XX_TYPEOF","XX_TEXTOF","XX_POSITIONIS","XX_SIZEIS",
"XX_TYPEIS","XX_TEXTIS","XX_TEMPLATE","XX_DO","XX_WHILE","XX_UNTIL","XX_REPEAT",
"XX_FOR","XX_EACH","XX_OF","XX_SWITCH","XX_CASE","XX_DEFAULT","XX_IF","XX_ELSE",
"XX_BEFORE","XX_AFTER","XX_WHEN","XX_GOTO","XX_BREAK","XX_CONTINUE","XX_RETURN",
"XX_TRY","XX_CATCH","XX_THROW","XX_WITH","XX_COLONCOLON_AND",
"XX_COLONCOLON_STAR","XX_COLONCOLON","XX_DOTDOT","XX_ELIPSIS",
"XX_BSLASHBSLASH_SHR","XX_BSLASHBSLASH_SHL","XX_BSLASHBSLASH",
"XX_BSLASHQUESTION","XX_DOTBSLASHQUESTION","XX_DOTQUESTION","XX_ATQUESTION",
"XX_ASSIGN","XX_LAND_ASSIGN","XX_LOR_ASSIGN","XX_LXOR_ASSIGN","XX_POW_ASSIGN",
"XX_ROO_ASSIGN","XX_LOG_ASSIGN","XX_SHR_ASSIGN","XX_SHL_ASSIGN","XX_ADD_ASSIGN",
"XX_SUB_ASSIGN","XX_MUL_ASSIGN","XX_DIV_ASSIGN","XX_MOD_ASSIGN","XX_QUO_ASSIGN",
"XX_AND_ASSIGN","XX_OR_ASSIGN","XX_XOR_ASSIGN","XX_RIGHT_OP","XX_LEFT_OP",
"XX_INC_OP","XX_DEC_OP","XX_COM_OP","XX_LCOM_OP","XX_LE_OP","XX_GE_OP",
"XX_NE_OP","XX_EQ_OP","XX_SHR_OP","XX_SHL_OP","XX_POW_OP","XX_ROO_OP",
"XX_LOG_OP","XX_LNOT_OP","XX_LAND_OP","XX_LOR_OP","XX_DEC_LITERAL",
"XX_BIN_LITERAL","XX_HEX_LITERAL","XX_OCT_LITERAL","XX_FLOAT_LITERAL",
"XX_CHAR_LITERAL","XX_TEXT_LITERAL","XX_URI_LITERAL","XX_TEMPLATE_LITERAL",
"XX_ELEMENT_LITERAL","XX_IDENTIFIER",
};
char *yyIsParser::yyrule[] = {
"$accept : parsed",
"parsed : expr",
"variable_declaration : type_specification class_name ';'",
"type_specification : type_definition",
"type_specification : type_reference",
"type_definition : void_type of_dimentions",
"type_definition : type_reference of_dimentions",
"type_definition : new_type_definition of_dimentions",
"type_definition : new_type_definition",
"new_type_definition : struct_definition",
"struct_definition : struct_designator '{' struct_member_definitions '}'",
"struct_designator : XX_STRUCT",
"struct_designator : XX_UNION",
"struct_member_definitions : struct_member_definitions struct_member_definition",
"struct_member_definitions : struct_member_definition",
"struct_member_definition : variable_declaration",
"of_dimentions : of_dimentions dimentions",
"of_dimentions : dimentions",
"dimentions : '[' dimention_list ']'",
"dimentions : '[' ']'",
"dimention_list : dimention_list ',' dimention_expr",
"dimention_list : ',' dimention_expr",
"dimention_list : dimention_expr",
"dimention_expr : conditional_expr",
"type_reference : XX_CLASS uri_qualified_class_name",
"type_reference : intrinsic_type",
"void_type : XX_VOID",
"intrinsic_type : XX_UNSIGNED",
"intrinsic_type : XX_SIGNED",
"intrinsic_type : XX_SHORT",
"intrinsic_type : XX_LONG",
"intrinsic_type : XX_INT",
"intrinsic_type : XX_FLOAT",
"intrinsic_type : XX_DOUBLE",
"intrinsic_type : XX_STRING",
"intrinsic_type : XX_CHAR",
"intrinsic_type : XX_BOOL",
"uri_qualified_class_name : uri_identifier document_qualified_class_name",
"uri_qualified_class_name : document_qualified_class_name",
"document_qualified_class_name : XX_COLONCOLON class_name XX_COLONCOLON qualified_class_name",
"document_qualified_class_name : XX_COLONCOLON class_name",
"document_qualified_class_name : qualified_class_name",
"uri_identifier : XX_URI_LITERAL",
"qualified_class_name : qualified_class_name XX_COLONCOLON class_name",
"qualified_class_name : class_name",
"class_name : class_identifier",
"class_identifier : XX_IDENTIFIER",
"class_identifier : XX_TEXT_LITERAL",
"expr : typed_assignment_expr",
"typed_assignment_expr : XX_CLASS variable_expr assignment_op assignment_expr",
"typed_assignment_expr : assignment_expr",
"assignment_expr : variable_expr assignment_op assignment_expr",
"assignment_expr : conditional_expr",
"conditional_expr : logical_or_expr '?' conditional_expr ':' conditional_expr",
"conditional_expr : logical_or_expr '!' conditional_expr",
"conditional_expr : logical_or_expr",
"logical_or_expr : logical_or_expr logical_or_op logical_and_expr",
"logical_or_expr : logical_and_expr",
"logical_and_expr : logical_and_expr logical_and_op logical_not_expr",
"logical_and_expr : logical_not_expr",
"logical_not_expr : logical_not_op equality_expr",
"logical_not_expr : equality_expr",
"equality_expr : equality_expr equality_op relational_expr",
"equality_expr : relational_expr",
"relational_expr : relational_expr relational_op or_expr",
"relational_expr : or_expr",
"or_expr : or_expr or_op xor_expr",
"or_expr : xor_expr",
"xor_expr : xor_expr xor_op and_expr",
"xor_expr : and_expr",
"and_expr : and_expr and_op shift_expr",
"and_expr : shift_expr",
"shift_expr : shift_expr shift_op add_expr",
"shift_expr : add_expr",
"add_expr : add_expr add_op mul_expr",
"add_expr : mul_expr",
"mul_expr : mul_expr mul_op pow_expr",
"mul_expr : pow_expr",
"pow_expr : pow_expr pow_op cast_expr",
"pow_expr : cast_expr",
"cast_expr : '(' type_specification ')' cast_expr",
"cast_expr : unary_expr",
"unary_expr : unary_op select_expr",
"unary_expr : select_expr",
"select_expr : select_expr '.' call_identifier arguments",
"select_expr : select_expr '.' call_identifier",
"select_expr : select_expr XX_DOTQUESTION '[' expr ']'",
"select_expr : '.' call_identifier arguments",
"select_expr : '.' call_identifier",
"select_expr : XX_DOTQUESTION '[' expr ']'",
"select_expr : select_expr '@' '[' expr ']'",
"select_expr : select_expr '@' '[' expr XX_ELIPSIS expr ']'",
"select_expr : select_expr '@' '[' '?' expr ']'",
"select_expr : select_expr '@' '[' '<' XX_ELIPSIS ']'",
"select_expr : select_expr '@' '[' XX_ELIPSIS '>' ']'",
"select_expr : select_expr '@' '[' XX_ELIPSIS ']'",
"select_expr : select_expr '@' primary_expr",
"select_expr : select_expr '\\\\' '[' expr ']'",
"select_expr : select_expr '\\\\' '[' expr XX_ELIPSIS expr ']'",
"select_expr : select_expr '\\\\' '[' '?' expr ']'",
"select_expr : select_expr '\\\\' '[' '<' XX_ELIPSIS ']'",
"select_expr : select_expr '\\\\' '[' XX_ELIPSIS '>' ']'",
"select_expr : select_expr '\\\\' '[' XX_ELIPSIS ']'",
"select_expr : select_expr '\\\\' primary_expr",
"select_expr : select_expr '\\\\' XX_DOTDOT",
"select_expr : select_expr '[' expr ']'",
"select_expr : select_expr '[' expr XX_ELIPSIS expr ']'",
"select_expr : select_expr '[' '?' expr ']'",
"select_expr : select_expr '[' '<' XX_ELIPSIS ']'",
"select_expr : select_expr '[' XX_ELIPSIS '>' ']'",
"select_expr : select_expr '[' XX_ELIPSIS ']'",
"select_expr : '\\\\' '[' expr ']'",
"select_expr : '\\\\' '[' expr XX_ELIPSIS expr ']'",
"select_expr : '\\\\' '[' '?' expr ']'",
"select_expr : '\\\\' '[' '<' XX_ELIPSIS ']'",
"select_expr : '\\\\' '[' XX_ELIPSIS '>' ']'",
"select_expr : '\\\\' '[' XX_ELIPSIS ']'",
"select_expr : '\\\\' primary_expr",
"select_expr : '@' '[' expr ']'",
"select_expr : '@' '[' expr XX_ELIPSIS expr ']'",
"select_expr : '@' '[' '?' expr ']'",
"select_expr : '@' '[' '<' XX_ELIPSIS ']'",
"select_expr : '@' '[' XX_ELIPSIS '>' ']'",
"select_expr : '@' '[' XX_ELIPSIS ']'",
"select_expr : '@' primary_expr",
"select_expr : '[' expr ']'",
"select_expr : '[' expr XX_ELIPSIS expr ']'",
"select_expr : '[' '?' expr ']'",
"select_expr : '[' '<' XX_ELIPSIS ']'",
"select_expr : '[' XX_ELIPSIS '>' ']'",
"select_expr : '[' XX_ELIPSIS ']'",
"select_expr : XX_DOTDOT",
"select_expr : '.'",
"select_expr : '@' '.'",
"select_expr : primary_expr",
"primary_expr : uri_expr_request_method_identifier_list arguments",
"primary_expr : uri_literal_request_method_identifier_list arguments",
"primary_expr : uri_request_method_identifier_list arguments",
"primary_expr : uri_expr XX_COLONCOLON_STAR value_expr",
"primary_expr : uri_literal XX_COLONCOLON_STAR value_expr",
"primary_expr : uri_expr_method_identifier_list arguments",
"primary_expr : uri_expr XX_BSLASHBSLASH_SHR uri_literal arguments",
"primary_expr : uri_expr XX_BSLASHBSLASH_SHR uri_expr arguments",
"primary_expr : uri_expr arguments call_identifier XX_BSLASHBSLASH parenthetic_expr",
"primary_expr : uri_expr arguments XX_BSLASHBSLASH parenthetic_expr",
"primary_expr : uri_expr arguments",
"primary_expr : uri_expr",
"primary_expr : uri_literal_method_identifier_list arguments",
"primary_expr : uri_literal XX_BSLASHBSLASH_SHR uri_literal arguments",
"primary_expr : uri_literal XX_BSLASHBSLASH_SHR uri_expr arguments",
"primary_expr : uri_literal arguments call_identifier XX_BSLASHBSLASH parenthetic_expr",
"primary_expr : uri_literal arguments XX_BSLASHBSLASH parenthetic_expr",
"primary_expr : uri_literal arguments",
"primary_expr : XX_FOREIGN uri_expr_method_identifier_list arguments",
"primary_expr : XX_FOREIGN uri_literal_method_identifier_list arguments",
"primary_expr : XX_NATIVE uri_expr_method_identifier_list arguments",
"primary_expr : XX_NATIVE uri_literal_method_identifier_list arguments",
"primary_expr : XX_NATIVE call_identifier arguments",
"primary_expr : call_identifier arguments",
"primary_expr : XX_COLONCOLON method_identifier_list arguments",
"primary_expr : method_identifier_list arguments",
"primary_expr : root_expr",
"value_expr : variable_expr",
"value_expr : parenthetic_expr",
"root_expr : prefix_op variable_expr",
"root_expr : variable_expr postfix_op",
"root_expr : variable_expr",
"root_expr : XX_POSITIONIS",
"root_expr : XX_TYPEIS",
"root_expr : XX_TEXTIS",
"root_expr : reference_expr",
"root_expr : parenthetic_expr",
"root_expr : literal",
"uri_request_method_identifier_list : XX_BSLASHBSLASH XX_COLONCOLON_AND method_identifier_list",
"uri_request_method_identifier_list : XX_BSLASHBSLASH XX_COLONCOLON_AND call_identifier",
"uri_expr_request_method_identifier_list : uri_request_method_expr XX_COLONCOLON_AND method_identifier_list",
"uri_expr_request_method_identifier_list : uri_request_method_expr XX_COLONCOLON_AND call_identifier",
"uri_request_method_expr : uri_expr",
"uri_expr_method_identifier_list : uri_expr XX_COLONCOLON method_identifier_list",
"uri_expr_method_identifier_list : uri_expr_object_identifier",
"uri_expr_object_identifier : uri_expr XX_COLONCOLON call_identifier",
"uri_expr : call_identifier XX_BSLASHBSLASH root_expr",
"uri_expr : XX_BSLASHBSLASH root_expr",
"uri_literal_request_method_identifier_list : uri_literal_request_method_uri XX_COLONCOLON_AND method_identifier_list",
"uri_literal_request_method_identifier_list : uri_literal_request_method_uri XX_COLONCOLON_AND call_identifier",
"uri_literal_request_method_uri : uri_literal",
"uri_literal_method_identifier_list : uri_literal XX_COLONCOLON method_identifier_list",
"uri_literal_method_identifier_list : uri_literal_object_identifier",
"uri_literal_object_identifier : uri_literal XX_COLONCOLON call_identifier",
"method_identifier_list : method_identifier_list XX_COLONCOLON call_identifier",
"method_identifier_list : call_identifier XX_COLONCOLON call_identifier",
"call_identifier : parenthetic_expr",
"call_identifier : literal_identifier",
"call_identifier : identifier",
"parenthetic_expr : '(' expr_list ')'",
"expr_list : expr ',' expr_list",
"expr_list : expr",
"variable_expr : indirection_expr",
"variable_expr : identifier",
"indirection_expr : variable_indirection_expr",
"indirection_expr : parenthetic_indirection_expr",
"indirection_expr : literal_indirection_expr",
"parenthetic_indirection_expr : XX_POW_OP parenthetic_expr",
"parenthetic_indirection_expr : '*' parenthetic_expr",
"literal_indirection_expr : XX_POW_OP literal_identifier",
"literal_indirection_expr : literal_indirection_identifier",
"literal_indirection_identifier : '*' literal_identifier",
"literal_identifier : XX_TEXT_LITERAL",
"variable_indirection_expr : variable_double_indirection_expr",
"variable_indirection_expr : '*' variable_expr",
"variable_double_indirection_expr : XX_POW_OP variable_expr",
"reference_expr : '&' identifier",
"arguments : '(' argument_expr_list ')'",
"arguments : '(' ')'",
"argument_expr_list : argument_expr_list ',' argument_expr",
"argument_expr_list : argument_expr",
"argument_expr : type_specification call_identifier '=' expr",
"argument_expr : type_specification '=' expr",
"argument_expr : call_identifier '=' expr",
"identifier : XX_IDENTIFIER",
"logical_or_op : XX_LOR_OP",
"logical_and_op : XX_LAND_OP",
"or_op : '|'",
"xor_op : '~'",
"and_op : '&'",
"unary_op : XX_SIZEOF",
"unary_op : XX_TYPEOF",
"unary_op : XX_TEXTOF",
"unary_op : '~'",
"assignment_op : '='",
"assignment_op : XX_ASSIGN",
"assignment_op : XX_LAND_ASSIGN",
"assignment_op : XX_LOR_ASSIGN",
"assignment_op : XX_AND_ASSIGN",
"assignment_op : XX_OR_ASSIGN",
"assignment_op : XX_XOR_ASSIGN",
"assignment_op : XX_ADD_ASSIGN",
"assignment_op : XX_SHR_ASSIGN",
"assignment_op : XX_SHL_ASSIGN",
"assignment_op : XX_SUB_ASSIGN",
"assignment_op : XX_MUL_ASSIGN",
"assignment_op : XX_DIV_ASSIGN",
"assignment_op : XX_MOD_ASSIGN",
"assignment_op : XX_POW_ASSIGN",
"assignment_op : XX_ROO_ASSIGN",
"assignment_op : XX_LOG_ASSIGN",
"logical_not_op : XX_LNOT_OP",
"logical_not_op : '!'",
"equality_op : XX_NE_OP",
"equality_op : XX_EQ_OP",
"relational_op : XX_LE_OP",
"relational_op : XX_GE_OP",
"relational_op : '<'",
"relational_op : '>'",
"shift_op : XX_SHR_OP",
"shift_op : XX_SHL_OP",
"add_op : '+'",
"add_op : '-'",
"mul_op : '*'",
"mul_op : '/'",
"mul_op : '$'",
"mul_op : '%'",
"pow_op : XX_POW_OP",
"pow_op : XX_ROO_OP",
"pow_op : XX_LOG_OP",
"prefix_op : prefix_postfix_op",
"postfix_op : prefix_postfix_op",
"prefix_postfix_op : XX_INC_OP",
"prefix_postfix_op : XX_DEC_OP",
"prefix_postfix_op : XX_COM_OP",
"prefix_postfix_op : XX_LCOM_OP",
"prefix_postfix_op : XX_RIGHT_OP",
"prefix_postfix_op : XX_LEFT_OP",
"literal : extern_literal",
"literal : uri_literal",
"literal : template_literal",
"literal : element_literal",
"literal : text_literal",
"literal : dec_literal",
"literal : bin_literal",
"literal : oct_literal",
"literal : hex_literal",
"literal : float_literal",
"extern_literal : XX_EXTERN XX_TEXT_LITERAL XX_URI_LITERAL",
"extern_literal : XX_EXTERN XX_IDENTIFIER XX_URI_LITERAL",
"extern_literal : XX_EXTERN XX_URI_LITERAL",
"uri_literal : XX_TEXT_LITERAL XX_URI_LITERAL",
"uri_literal : XX_IDENTIFIER XX_URI_LITERAL",
"uri_literal : XX_URI_LITERAL",
"template_literal : XX_TEXT_LITERAL XX_TEMPLATE_LITERAL",
"template_literal : XX_IDENTIFIER XX_TEMPLATE_LITERAL",
"template_literal : XX_TEMPLATE_LITERAL",
"element_literal : XX_TEXT_LITERAL element_literal_list",
"element_literal : XX_IDENTIFIER element_literal_list",
"element_literal : element_literal_list",
"element_literal_list : element_literal_item element_literal_list",
"element_literal_list : element_literal_item",
"element_literal_item : XX_ELEMENT_LITERAL",
"text_literal : text_literal_list",
"text_literal_list : text_literal_item text_literal_list",
"text_literal_list : text_literal_item",
"text_literal_item : XX_TEXT_LITERAL",
"dec_literal : XX_DEC_LITERAL",
"bin_literal : XX_BIN_LITERAL",
"oct_literal : XX_OCT_LITERAL",
"hex_literal : XX_HEX_LITERAL",
"float_literal : XX_FLOAT_LITERAL",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
#define yystacksize YYSTACKSIZE
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

yyIsParser::yyIsParser()
{
    yyss = 0;
    yyvs = 0;
}

yyIsParser::~yyIsParser()
{
    yyfinish();
}

int yyIsParser::yyinit()
{
    while (!yyss)
        if ((yyss = new short[YYSTACKSIZE]) == 0)
        if (yyoutofmemory())
            return 0;

    while (!yyvs)
        if ((yyvs= new YYSTYPE[YYSTACKSIZE]) == 0)
        if (yyoutofmemory())
            return 0;

    return 1;
}

void yyIsParser::yyfinish()
{
    if (yyvs)
    {
        delete yyvs;
        yyvs = 0;
    }
    if (yyss)
    {
        delete yyss;
        yyss = 0;
    }
}

int yyIsParser::yyoutofmemory()
{
    yyerror("out of memory");
    return 1;
}

void yyIsParser::yyerror(const char *msg)
{
   yyprintf("%s\n",msg);
}

int yyIsParser::yyprintf( const char* format, ... )
{
   va_list arg;
   int result;

   va_start(arg,format);
   result=vprintf(format,arg);
   va_end(arg);
   return result;
}

int yyParser::yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    if (!yyinit())
        goto yyabort;
    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            yyprintf("yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            yyprintf("yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    yyprintf("yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    yyprintf("yydebug: error recovery discarding state %d\
",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            yyprintf("yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        yyprintf("yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
{ return OnParsed();}
break;
case 2:
{if ((m_error=OnVariableDeclaration())) return m_error;}
break;
case 3:
{if ((m_error=OnTypeDefinition())) return m_error;}
break;
case 5:
{if ((m_error=OnDimentionedTypeReference())) return m_error;}
break;
case 6:
{if ((m_error=OnDimentionedTypeReference())) return m_error;}
break;
case 7:
{if ((m_error=OnDimentionedTypeDefinition())) return m_error;}
break;
case 11:
{if ((m_error=OnStruct())) return m_error;}
break;
case 12:
{if ((m_error=OnUnion())) return m_error;}
break;
case 15:
{if ((m_error=OnMember())) return m_error;}
break;
case 16:
{if ((m_error=OnOfDimentions())) return m_error;}
break;
case 17:
{if ((m_error=OnDimentions())) return m_error;}
break;
case 19:
{if ((m_error=OnUnboundDimentions())) return m_error;}
break;
case 20:
{if ((m_error=OnDimentionList())) return m_error;}
break;
case 21:
{if ((m_error=OnUnboundDimention())) return m_error;}
break;
case 22:
{if ((m_error=OnDimention())) return m_error;}
break;
case 23:
{if ((m_error=OnDimentionExpr())) return m_error;}
break;
case 24:
{if ((m_error=OnTypeReference())) return m_error;}
break;
case 26:
{if ((m_error=OnFunction("void"))) return m_error;}
break;
case 27:
{if ((m_error=OnIntrinsicType("unsigned"))) return m_error;}
break;
case 28:
{if ((m_error=OnIntrinsicType("signed"))) return m_error;}
break;
case 29:
{if ((m_error=OnIntrinsicType("short"))) return m_error;}
break;
case 30:
{if ((m_error=OnIntrinsicType("long"))) return m_error;}
break;
case 31:
{if ((m_error=OnIntrinsicType("int"))) return m_error;}
break;
case 32:
{if ((m_error=OnIntrinsicType("float"))) return m_error;}
break;
case 33:
{if ((m_error=OnIntrinsicType("double"))) return m_error;}
break;
case 34:
{if ((m_error=OnIntrinsicType("string"))) return m_error;}
break;
case 35:
{if ((m_error=OnIntrinsicType("char"))) return m_error;}
break;
case 36:
{if ((m_error=OnIntrinsicType("bool"))) return m_error;}
break;
case 37:
{if ((m_error=OnURIQualifiedName())) return m_error;}
break;
case 39:
{if ((m_error=OnDocumentQualifiedName())) return m_error;}
break;
case 40:
{if ((m_error=OnDocumentLevelName())) return m_error;}
break;
case 42:
{if ((m_error=OnURIdentifier())) return m_error;}
break;
case 43:
{if ((m_error=OnElementQualifiedName())) return m_error;}
break;
case 44:
{if ((m_error=OnElementLevelName())) return m_error;}
break;
case 45:
{if ((m_error=OnIdentifier())) return m_error;}
break;
case 49:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 51:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 53:
{if ((m_error=OnConditionalExpr())) return m_error;}
break;
case 54:
{if ((m_error=OnElseConditionalExpr())) return m_error;}
break;
case 56:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 58:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 60:
{if ((m_error=OnUnaryExpr())) return m_error;}
break;
case 62:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 64:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 66:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 68:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 70:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 72:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 74:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 76:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 78:
{if ((m_error=OnBinaryExpr())) return m_error;}
break;
case 80:
{if ((m_error=OnCastExpr())) return m_error;}
break;
case 82:
{if ((m_error=OnUnaryExpr())) return m_error;}
break;
case 84:
{if ((m_error=OnMethodOfCall())) return m_error;}
break;
case 85:
{if ((m_error=OnGetMemberOf())) return m_error;}
break;
case 86:
{if ((m_error=OnGetMembersOfWhere())) return m_error;}
break;
case 87:
{if ((m_error=OnMethodCall())) return m_error;}
break;
case 88:
{if ((m_error=OnGetMember())) return m_error;}
break;
case 89:
{if ((m_error=OnGetMembersWhere())) return m_error;}
break;
case 90:
{if ((m_error=OnAttributeOfAt())) return m_error;}
break;
case 91:
{if ((m_error=OnAttributesOfRange())) return m_error;}
break;
case 92:
{if ((m_error=OnAttributesOfWhere())) return m_error;}
break;
case 93:
{if ((m_error=OnFirstAttributeOf())) return m_error;}
break;
case 94:
{if ((m_error=OnLastAttributeOf())) return m_error;}
break;
case 95:
{if ((m_error=OnAllAttributesOf())) return m_error;}
break;
case 96:
{if ((m_error=OnAttributeOf())) return m_error;}
break;
case 97:
{if ((m_error=OnElementAtExpr())) return m_error;}
break;
case 98:
{if ((m_error=OnElementRangeExpr())) return m_error;}
break;
case 99:
{if ((m_error=OnElementWhereExpr())) return m_error;}
break;
case 100:
{if ((m_error=OnFirstElementExpr())) return m_error;}
break;
case 101:
{if ((m_error=OnLastElementExpr())) return m_error;}
break;
case 102:
{if ((m_error=OnAllElementsExpr())) return m_error;}
break;
case 103:
{if ((m_error=OnElementExpr())) return m_error;}
break;
case 104:
{if ((m_error=OnParentElementExpr())) return m_error;}
break;
case 105:
{if ((m_error=OnElementAtSetExpr())) return m_error;}
break;
case 106:
{if ((m_error=OnElementRangeSetExpr())) return m_error;}
break;
case 107:
{if ((m_error=OnElementWhereSetExpr())) return m_error;}
break;
case 108:
{if ((m_error=OnFirstElementSetExpr())) return m_error;}
break;
case 109:
{if ((m_error=OnLastElementSetExpr())) return m_error;}
break;
case 110:
{if ((m_error=OnAllElementsSetExpr())) return m_error;}
break;
case 111:
{if ((m_error=OnRootElementAt())) return m_error;}
break;
case 112:
{if ((m_error=OnRootElementRange())) return m_error;}
break;
case 113:
{if ((m_error=OnRootElementWhere())) return m_error;}
break;
case 114:
{if ((m_error=OnFirstRootElement())) return m_error;}
break;
case 115:
{if ((m_error=OnLastRootElement())) return m_error;}
break;
case 116:
{if ((m_error=OnAllRootElements())) return m_error;}
break;
case 117:
{if ((m_error=OnRootElementExpr())) return m_error;}
break;
case 118:
{if ((m_error=OnAttributeAt())) return m_error;}
break;
case 119:
{if ((m_error=OnAttributeRange())) return m_error;}
break;
case 120:
{if ((m_error=OnAttributeWhere())) return m_error;}
break;
case 121:
{if ((m_error=OnFirstAttribute())) return m_error;}
break;
case 122:
{if ((m_error=OnLastAttribute())) return m_error;}
break;
case 123:
{if ((m_error=OnAllAttributes())) return m_error;}
break;
case 124:
{if ((m_error=OnAttribute())) return m_error;}
break;
case 125:
{if ((m_error=OnElementAt())) return m_error;}
break;
case 126:
{if ((m_error=OnElementRange())) return m_error;}
break;
case 127:
{if ((m_error=OnElementWhere())) return m_error;}
break;
case 128:
{if ((m_error=OnFirstElement())) return m_error;}
break;
case 129:
{if ((m_error=OnLastElement())) return m_error;}
break;
case 130:
{if ((m_error=OnAllElements())) return m_error;}
break;
case 131:
{if ((m_error=OnParentElement())) return m_error;}
break;
case 132:
{if ((m_error=OnElementIs())) return m_error;}
break;
case 133:
{if ((m_error=OnAttributeIs())) return m_error;}
break;
case 135:
{if ((m_error=OnURIMethodIdentifierCall())) return m_error;}
break;
case 136:
{if ((m_error=OnURIMethodIdentifierCall())) return m_error;}
break;
case 137:
{if ((m_error=OnURIMethodIdentifierCall())) return m_error;}
break;
case 138:
{if ((m_error=OnURIRequestMethodCall())) return m_error;}
break;
case 139:
{if ((m_error=OnURIRequestMethodCall())) return m_error;}
break;
case 140:
{if ((m_error=OnURIMethodCall())) return m_error;}
break;
case 141:
{if ((m_error=OnURIURITransform())) return m_error;}
break;
case 142:
{if ((m_error=OnURIURITransform())) return m_error;}
break;
case 143:
{if ((m_error=OnIdentifierURIContent())) return m_error;}
break;
case 144:
{if ((m_error=OnURIContent())) return m_error;}
break;
case 145:
{if ((m_error=OnURIArguments())) return m_error;}
break;
case 147:
{if ((m_error=OnURIMethodCall())) return m_error;}
break;
case 148:
{if ((m_error=OnURIURITransform())) return m_error;}
break;
case 149:
{if ((m_error=OnURIURITransform())) return m_error;}
break;
case 150:
{if ((m_error=OnIdentifierURIContent())) return m_error;}
break;
case 151:
{if ((m_error=OnURIContent())) return m_error;}
break;
case 152:
{if ((m_error=OnURIArguments())) return m_error;}
break;
case 153:
{if ((m_error=OnURIForeignCall())) return m_error;}
break;
case 154:
{if ((m_error=OnURIForeignCall())) return m_error;}
break;
case 155:
{if ((m_error=OnURINativeCall())) return m_error;}
break;
case 156:
{if ((m_error=OnURINativeCall())) return m_error;}
break;
case 157:
{if ((m_error=OnNativeCall())) return m_error;}
break;
case 158:
{if ((m_error=OnCall())) return m_error;}
break;
case 159:
{if ((m_error=OnDocumentMethodIdentifierCall())) return m_error;}
break;
case 160:
{if ((m_error=OnMethodIdentifierCall())) return m_error;}
break;
case 162:
{if ((m_error=OnVariable())) return m_error;}
break;
case 164:
{if ((m_error=OnUnaryExpr())) return m_error;}
break;
case 165:
{if ((m_error=OnPostfixExpr())) return m_error;}
break;
case 166:
{if ((m_error=OnVariable())) return m_error;}
break;
case 167:
{if ((m_error=OnElementPosition())) return m_error;}
break;
case 168:
{if ((m_error=OnElementType())) return m_error;}
break;
case 169:
{if ((m_error=OnElementText())) return m_error;}
break;
case 173:
{if ((m_error=OnRequestMethodIdentifierList())) return m_error;}
break;
case 174:
{if ((m_error=OnRequestURIObjectIdentifier())) return m_error;}
break;
case 176:
{if ((m_error=OnURIObjectIdentifier())) return m_error;}
break;
case 177:
{if ((m_error=OnRequestMethodURI())) return m_error;}
break;
case 180:
{if ((m_error=OnURIObjectIdentifier())) return m_error;}
break;
case 181:
{if ((m_error=OnIdentifierURIExpr())) return m_error;}
break;
case 182:
{if ((m_error=OnURIExpr())) return m_error;}
break;
case 184:
{if ((m_error=OnURIObjectIdentifier())) return m_error;}
break;
case 185:
{if ((m_error=OnRequestMethodURI())) return m_error;}
break;
case 188:
{if ((m_error=OnURIObjectIdentifier())) return m_error;}
break;
case 189:
{if ((m_error=OnMethodIdentifierList())) return m_error;}
break;
case 190:
{if ((m_error=OnObjectMethodIdentifierPair())) return m_error;}
break;
case 195:
{if ((m_error=OnBinaryOperator(','))) return m_error;}
break;
case 199:
{if ((m_error=OnVariable())) return m_error;}
break;
case 202:
{if ((m_error=OnVariable())) return m_error;}
break;
case 204:
{if ((m_error=OnVariable())) return m_error;}
break;
case 207:
{if ((m_error=OnIdentifierExpr())) return m_error;}
break;
case 208:
{if ((m_error=OnVariable())) return m_error;}
break;
case 213:
{if ((m_error=OnEmptyArguments())) return m_error;}
break;
case 214:
{if ((m_error=OnNextArgument())) return m_error;}
break;
case 215:
{if ((m_error=OnFirstArgument())) return m_error;}
break;
case 216:
{if ((m_error=OnTypedArgument())) return m_error;}
break;
case 217:
{if ((m_error=OnTypeArgument())) return m_error;}
break;
case 218:
{if ((m_error=OnArgument())) return m_error;}
break;
case 219:
{if ((m_error=OnIdentifierExpr())) return m_error;}
break;
case 220:
{if ((m_error=OnOperator(XX_LOR_OP))) return m_error;}
break;
case 221:
{if ((m_error=OnOperator(XX_LAND_OP))) return m_error;}
break;
case 222:
{if ((m_error=OnOperator('|'))) return m_error;}
break;
case 223:
{if ((m_error=OnOperator('~'))) return m_error;}
break;
case 224:
{if ((m_error=OnOperator('&'))) return m_error;}
break;
case 225:
{if ((m_error=OnOperator(XX_SIZEOF))) return m_error;}
break;
case 226:
{if ((m_error=OnOperator(XX_TYPEOF))) return m_error;}
break;
case 227:
{if ((m_error=OnOperator(XX_TEXTOF))) return m_error;}
break;
case 228:
{if ((m_error=OnOperator('~'))) return m_error;}
break;
case 229:
{if ((m_error=OnOperator('='))) return m_error;}
break;
case 230:
{if ((m_error=OnOperator(XX_ASSIGN))) return m_error;}
break;
case 231:
{if ((m_error=OnOperator(XX_LAND_ASSIGN))) return m_error;}
break;
case 232:
{if ((m_error=OnOperator(XX_LOR_ASSIGN))) return m_error;}
break;
case 233:
{if ((m_error=OnOperator(XX_AND_ASSIGN))) return m_error;}
break;
case 234:
{if ((m_error=OnOperator(XX_OR_ASSIGN))) return m_error;}
break;
case 235:
{if ((m_error=OnOperator(XX_XOR_ASSIGN))) return m_error;}
break;
case 236:
{if ((m_error=OnOperator(XX_ADD_ASSIGN))) return m_error;}
break;
case 237:
{if ((m_error=OnOperator(XX_SHR_ASSIGN))) return m_error;}
break;
case 238:
{if ((m_error=OnOperator(XX_SHL_ASSIGN))) return m_error;}
break;
case 239:
{if ((m_error=OnOperator(XX_SUB_ASSIGN))) return m_error;}
break;
case 240:
{if ((m_error=OnOperator(XX_MUL_ASSIGN))) return m_error;}
break;
case 241:
{if ((m_error=OnOperator(XX_DIV_ASSIGN))) return m_error;}
break;
case 242:
{if ((m_error=OnOperator(XX_MOD_ASSIGN))) return m_error;}
break;
case 243:
{if ((m_error=OnOperator(XX_POW_ASSIGN))) return m_error;}
break;
case 244:
{if ((m_error=OnOperator(XX_ROO_ASSIGN))) return m_error;}
break;
case 245:
{if ((m_error=OnOperator(XX_LOG_ASSIGN))) return m_error;}
break;
case 246:
{if ((m_error=OnOperator(XX_LNOT_OP))) return m_error;}
break;
case 247:
{if ((m_error=OnOperator('!'))) return m_error;}
break;
case 248:
{if ((m_error=OnOperator(XX_NE_OP))) return m_error;}
break;
case 249:
{if ((m_error=OnOperator(XX_EQ_OP))) return m_error;}
break;
case 250:
{if ((m_error=OnOperator(XX_LE_OP))) return m_error;}
break;
case 251:
{if ((m_error=OnOperator(XX_GE_OP))) return m_error;}
break;
case 252:
{if ((m_error=OnOperator('<'))) return m_error;}
break;
case 253:
{if ((m_error=OnOperator('>'))) return m_error;}
break;
case 254:
{if ((m_error=OnOperator(XX_SHR_OP))) return m_error;}
break;
case 255:
{if ((m_error=OnOperator(XX_SHL_OP))) return m_error;}
break;
case 256:
{if ((m_error=OnOperator('+'))) return m_error;}
break;
case 257:
{if ((m_error=OnOperator('-'))) return m_error;}
break;
case 258:
{if ((m_error=OnOperator('*'))) return m_error;}
break;
case 259:
{if ((m_error=OnOperator('/'))) return m_error;}
break;
case 260:
{if ((m_error=OnOperator('$'))) return m_error;}
break;
case 261:
{if ((m_error=OnOperator('%'))) return m_error;}
break;
case 262:
{if ((m_error=OnOperator(XX_POW_OP))) return m_error;}
break;
case 263:
{if ((m_error=OnOperator(XX_ROO_OP))) return m_error;}
break;
case 264:
{if ((m_error=OnOperator(XX_LOG_OP))) return m_error;}
break;
case 266:
{if ((m_error=OnPostfixOperator())) return m_error;}
break;
case 267:
{if ((m_error=OnOperator(XX_INC_OP))) return m_error;}
break;
case 268:
{if ((m_error=OnOperator(XX_DEC_OP))) return m_error;}
break;
case 269:
{if ((m_error=OnOperator(XX_COM_OP))) return m_error;}
break;
case 270:
{if ((m_error=OnOperator(XX_LCOM_OP))) return m_error;}
break;
case 271:
{if ((m_error=OnOperator(XX_RIGHT_OP))) return m_error;}
break;
case 272:
{if ((m_error=OnOperator(XX_LEFT_OP))) return m_error;}
break;
case 283:
{if ((m_error=OnExternIdentifierLiteral())) return m_error;}
break;
case 284:
{if ((m_error=OnExternIdentifierLiteral())) return m_error;}
break;
case 285:
{if ((m_error=OnExternLiteral())) return m_error;}
break;
case 286:
{if ((m_error=OnIdentifierURILiteralExpr())) return m_error;}
break;
case 287:
{if ((m_error=OnIdentifierURILiteralExpr())) return m_error;}
break;
case 288:
{if ((m_error=OnURILiteralExpr())) return m_error;}
break;
case 289:
{if ((m_error=OnIdentifierTemplateLiteral())) return m_error;}
break;
case 290:
{if ((m_error=OnIdentifierTemplateLiteral())) return m_error;}
break;
case 291:
{if ((m_error=OnTemplateLiteral())) return m_error;}
break;
case 292:
{if ((m_error=OnIdentifierElementLiteral())) return m_error;}
break;
case 293:
{if ((m_error=OnIdentifierElementLiteral())) return m_error;}
break;
case 294:
{if ((m_error=OnElementLiteral())) return m_error;}
break;
case 295:
{if ((m_error=OnConcatTextLiteral())) return m_error;}
break;
case 298:
{if ((m_error=OnTextLiteral())) return m_error;}
break;
case 299:
{if ((m_error=OnConcatTextLiteral())) return m_error;}
break;
case 302:
{if ((m_error=OnDecimalLiteral())) return m_error;}
break;
case 303:
{if ((m_error=OnBinaryLiteral())) return m_error;}
break;
case 304:
{if ((m_error=OnOctalLiteral())) return m_error;}
break;
case 305:
{if ((m_error=OnHexLiteral())) return m_error;}
break;
case 306:
{if ((m_error=OnFloatLiteral())) return m_error;}
break;
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            yyprintf("yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                yyprintf("yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        yyprintf("yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
