/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#include <stdio.h>
#include <stdlib.h>

#ifdef __cplusplus

class cCharStream;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif    /* __STDC__ */
#endif    /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;


#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *     if ( condition_holds )
 *        yyless( 5 );
 *    else
 *        do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        *yy_cp = yy_hold_char; \
        yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
    {
    cCharStream* yy_input_file;
    int yy_lineno;          /* input line number */
    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
    };


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! yy_current_buffer ) \
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
    yy_current_buffer->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
    yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 141
#define YY_END_OF_BUFFER 142
static yyconst short int yy_acclist[502] =
    {   0,
      142,  132,  141,  131,  132,  141,  131,  141,  132,  141,
      132,  141,  132,  141,  132,  141,  132,  141,  132,  141,
      132,  141,  132,  141,  132,  141,  132,  141,  116,  120,
      132,  141,  116,  132,  141,  132,  141,  132,  141,  132,
      141,  132,  141,  132,  141,  123,  132,  141,  132,  141,
      132,  141,  123,  132,  141,  123,  132,  141,  123,  132,
      141,  123,  132,  141,  123,  132,  141,  123,  132,  141,
      123,  132,  141,  123,  132,  141,  123,  132,  141,  123,
      132,  141,  123,  132,  141,  123,  132,  141,  123,  132,
      141,  123,  132,  141,  123,  132,  141,  123,  132,  141,

      123,  132,  141,  132,  141,  132,  141,  135,  141,  134,
      141,  135,  141,  138,  141,  137,  141,  138,  141,  140,
      141,  139,  141,  103,  107,  126,  115,   81,   93,   83,
      111,   94,  127,  113,   91,  100,   89,  101,   90,   72,
       80,    2,    1,  114,   92,  119,  116,  120,  116,  116,
       71,   97,   84,  110,  104,  106,  108,   82,  105,  109,
       79,  123,   78,   76,   96,  123,  123,  123,  123,  123,
      123,  123,  123,    4,  123,  123,  123,  123,  123,  123,
       14,  123,  123,  123,  123,  123,    9,  123,   65,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,   95,
      112,  102,  133,  136,   87,   73,   77,    3,  121,  119,
      119,  122,  117,  118,  120,   69,   70,   99,   86,   85,
       98,   64,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,    7,  123,  123,   54,
      123,  123,  123,  123,   63,  123,   68,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,   17,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,   88,  125,  124,  121,  122,  117,
      117,  118,  118,  129,  128,   75,   74,  130,   67,   49,

      123,  123,   11,  123,  123,   50,  123,  123,  123,  123,
      123,    8,  123,   15,  123,  123,  123,  123,  123,   56,
      123,  123,  123,   66,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,   48,  123,   12,  123,
      123,   16,  123,  121,   20,  123,   18,  123,   45,  123,
      123,  123,  123,  123,   51,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,   55,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,   19,
      123,  123,  123,   47,  123,  123,    6,  123,   37,  123,

      123,  123,    5,  123,  123,  123,   52,  123,   60,  123,
      123,  123,   35,  123,   28,  123,  123,   61,  123,  123,
      123,  123,  123,   42,  123,   22,  123,   57,  123,   31,
      123,   24,  123,   53,  123,   46,  123,   10,  123,  123,
       32,  123,   25,  123,   33,  123,   26,  123,  123,  123,
      123,  123,   13,  123,   62,  123,   59,  123,  123,  123,
      123,  123,   43,  123,  123,  123,  123,  123,   41,  123,
       21,  123,  123,  123,   34,  123,   27,  123,  123,   39,
      123,   58,  123,   40,  123,   38,  123,  123,  123,   44,
      123,  123,  123,   30,  123,   23,  123,   36,  123,   29,

      123
    } ;

static yyconst short int yy_accept[410] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   13,   15,   17,   19,   21,   23,
       25,   27,   29,   33,   36,   38,   40,   42,   44,   46,
       49,   51,   53,   56,   59,   62,   65,   68,   71,   74,
       77,   80,   83,   86,   89,   92,   95,   98,  101,  104,
      106,  108,  110,  112,  114,  116,  118,  120,  122,  124,
      125,  126,  126,  127,  127,  128,  128,  129,  130,  131,
      132,  133,  133,  134,  134,  135,  135,  136,  137,  138,
      139,  140,  141,  142,  142,  143,  144,  145,  146,  146,
      147,  147,  147,  147,  147,  148,  149,  150,  151,  152,

      153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  176,  177,  178,  179,  180,  181,  183,  184,
      185,  186,  187,  189,  191,  192,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  215,
      215,  215,  216,  216,  216,  216,  217,  218,  219,  220,
      221,  222,  222,  223,  224,  225,  226,  227,  228,  229,
      230,  231,  232,  232,  232,  232,  232,  232,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,

      246,  247,  249,  250,  252,  253,  254,  255,  257,  258,
      259,  260,  261,  262,  263,  264,  265,  266,  267,  268,
      269,  270,  271,  272,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  288,
      289,  290,  291,  292,  293,  294,  294,  295,  295,  295,
      296,  296,  297,  298,  298,  298,  299,  300,  302,  303,
      305,  306,  308,  309,  310,  311,  312,  314,  316,  317,
      318,  319,  320,  322,  323,  324,  325,  326,  327,  328,
      329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
      339,  340,  341,  342,  343,  344,  345,  346,  347,  349,

      351,  352,  354,  354,  355,  357,  359,  361,  362,  363,
      364,  365,  367,  368,  369,  370,  371,  372,  373,  374,
      375,  376,  377,  378,  379,  381,  382,  383,  384,  385,
      386,  387,  388,  389,  390,  392,  393,  394,  396,  397,
      399,  401,  402,  403,  405,  406,  407,  409,  411,  412,
      413,  415,  417,  418,  420,  421,  422,  423,  424,  426,
      428,  430,  432,  434,  436,  438,  440,  441,  443,  445,
      447,  449,  450,  451,  452,  453,  455,  457,  459,  460,
      461,  462,  463,  465,  466,  467,  468,  469,  471,  473,
      474,  475,  477,  479,  480,  482,  484,  486,  488,  489,

      490,  492,  493,  494,  496,  498,  500,  502,  502
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    1,
        1,    9,   10,    1,   11,   12,   13,   14,   15,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    1,   19,
       20,   21,   22,   23,   24,   24,   24,   24,   25,   26,
       27,   27,   27,   27,   27,   28,   27,   27,   27,   27,
       27,   27,   27,   27,   29,   27,   27,   30,   31,   27,
        1,   32,    1,   33,   27,   34,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   27,   44,   45,   46,   47,
       48,   49,   27,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,   59,    1,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    3,    3,    3,    3,
        3,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst short int yy_base[421] =
    {   0,
        0,    0,   58,   59,   60,   66,  545,  544,  546,  549,
      549,  549,   60,   60,   64,   66,   63,   69,   71,   68,
       75,   90,   99,  145,   56,   98,  525,   88,  522,    0,
       68,  523,  495,   72,   86,   54,   88,   53,   65,  493,
       91,   85,   92,  501,   94,  108,  101,  129,  111,  107,
      479,  549,  549,  525,  549,  549,  524,  549,  549,  549,
      549,  136,  549,  533,  549,  166,  549,  549,  549,  515,
      549,  135,  549,  531,  549,  173,  549,  549,  549,  549,
      549,  521,  549,  510,  549,  549,  518,  549,  166,  187,
      180,  207,    0,  173,    0,  161,  549,  163,  200,  549,

      549,  191,  549,  549,  549,  549,  549,  193,  549,    0,
      549,  220,  549,  492,  481,  489,  178,  492,  491,  478,
      484,  470,  485,  470,  468,  471,  468,    0,  126,  470,
      181,  464,    0,  495,  463,  195,  477,  460,  463,  179,
      460,  466,  189,  458,  450,  457,  199,  462,  454,  453,
      459,  205,  449,  549,  480,  549,  549,  549,  233,  244,
      493,  549,  246,  249,  489,  549,  549,  549,  249,  549,
      225,  264,  268,  244,  272,  549,  549,  549,  549,  549,
      549,  549,  226,  143,  478,  475,  235,  475,  449,  458,
      453,  454,  440,  438,  436,  452,  450,  443,  445,  444,

      447,  442,  435,    0,  438,  439,  434,  456,  549,  432,
      434,  419,  420,  426,  417,  419,  421,  428,  218,  414,
      416,  412,  415,    0,  423,  413,  417,  416,  411,  414,
      404,  417,  407,  408,  410,  549,  549,  549,  288,  549,
      549,  549,  247,  549,  248,  263,  549,  448,  282,  549,
      447,  549,  549,  274,  446,  549,  549,    0,  404,    0,
      405,    0,  395,  402,  391,  398,    0,    0,  392,  389,
      397,  386,    0,  264,  384,  549,  385,  393,  400,  395,
      390,  382,  379,  391,  212,  382,  391,  390,  381,  268,
      370,  275,  377,  382,  377,  380,  385,  366,    0,    0,

      379,    0,  305,  312,    0,    0,    0,  370,  371,  376,
      367,    0,  372,  374,  360,  370,  360,  369,  364,  350,
      353,  367,  366,  355,    0,  363,  349,  359,  357,  345,
      354,  360,  343,  353,    0,  341,  351,    0,  343,    0,
        0,  320,  320,    0,  301,  301,    0,    0,  305,  312,
        0,    0,  315,    0,  301,  287,  309,  295,    0,    0,
        0,    0,    0,    0,    0,    0,  294,    0,    0,    0,
        0,  306,  299,  298,  303,    0,    0,    0,  304,  292,
      287,  294,    0,  294,  285,  272,  270,    0,    0,  252,
      288,    0,    0,  218,    0,    0,    0,  289,  149,  153,

        0,   81,   66,    0,    0,    0,    0,  549,  357,  360,
      363,  366,  369,  371,  374,  377,   73,  380,  383,  386
    } ;

static yyconst short int yy_def[421] =
    {   0,
      408,    1,  409,  409,  410,  410,  411,  411,  408,  408,
      408,  408,  408,  412,  408,  408,  413,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  414,
      408,  408,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  412,  408,  412,  408,  415,  408,  408,  408,  408,
      408,  413,  408,  413,  408,  416,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  417,  408,   24,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408,  414,
      408,  408,  408,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  408,  408,  408,  408,  408,  415,  415,
      415,  408,  416,  416,  416,  408,  408,  408,  408,  408,
      408,  408,  408,  417,  408,  408,  408,  408,  408,  408,
      408,  408,  418,  419,  408,  408,  420,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,  414,  408,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  418,  408,  418,  419,  408,
      419,  408,  408,  420,  420,  408,  408,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  408,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  408,  408,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  414,  414,  414,  414,  414,

      414,  414,  414,  414,  414,  414,  414,    0,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408
    } ;

static yyconst short int yy_nxt[610] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   24,   24,   25,   26,   27,
       28,   10,   29,   30,   30,   30,   30,   30,   30,   30,
       30,   31,   32,   10,   33,   34,   35,   36,   37,   38,
       30,   30,   39,   30,   40,   30,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   30,   30,   30,   50,   51,
       53,   53,   56,   60,   63,   57,   54,   54,   56,   65,
       73,   57,   70,   99,  174,  100,   66,   75,   80,   61,
       78,   76,   67,   68,   69,   71,   82,   81,   77,  111,
       79,   64,  121,  106,   74,   85,   83,  126,   86,  112,

      127,  122,   87,  101,  128,  407,   84,  107,  108,   88,
       89,  129,   90,   90,   90,   91,  102,  103,  104,  115,
      117,  116,  123,   92,  133,  131,  154,  118,   93,   94,
      119,  406,  124,  120,  134,  139,  140,   92,  132,  135,
       63,  136,   73,  125,  137,  141,  143,  147,  142,  144,
      250,  148,  152,  153,   93,   94,   89,  145,   95,   95,
       95,   95,  203,  149,  146,  155,   74,   64,  160,   92,
       96,  150,   97,   98,  251,  164,  151,  204,  161,  169,
      169,  169,  169,   92,   96,  165,  175,  175,  176,   97,
       97,   89,  405,   91,   91,   91,   91,   98,   89,  404,

       90,   90,   90,   91,   92,  176,  177,   97,  178,  179,
      180,   92,  181,  182,  170,  171,  172,  172,   92,  217,
      173,  173,  173,  173,  183,   92,  206,  184,  191,  192,
      247,  170,  207,  211,  221,  160,  218,  212,  185,  171,
      186,  226,  213,  233,  222,  161,  160,  234,  164,  227,
      228,  164,  170,  187,  327,  401,  161,  248,  165,  328,
      286,  165,  169,  169,  169,  169,  255,  247,  256,  170,
      287,  242,  243,  239,  242,  244,  240,  173,  173,  173,
      173,  173,  173,  173,  173,  175,  175,  239,  242,  250,
      398,  242,  244,  240,  248,  241,  243,  303,  303,  244,

      245,  304,  304,  304,  304,  255,  315,  256,  397,  396,
      333,  316,  241,  251,  317,  334,  244,  336,  304,  304,
      304,  304,  337,  395,  245,  304,  304,  304,  304,  381,
      399,  402,  394,  393,  382,  400,  403,  392,  391,  240,
      390,  389,  388,  387,  386,  385,  384,  383,  380,  379,
      378,  377,  376,  375,  374,  373,  240,   52,   52,   52,
       55,   55,   55,   58,   58,   58,   62,   62,   62,   72,
       72,   72,  110,  110,  159,  159,  159,  163,  163,  163,
      246,  246,  246,  249,  249,  249,  254,  254,  254,  372,
      371,  370,  369,  368,  367,  366,  365,  364,  363,  362,

      361,  360,  359,  358,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  335,  332,  331,  330,  329,  326,
      325,  324,  323,  322,  321,  320,  319,  318,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  408,  408,
      408,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  285,  284,  283,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  253,  252,  238,  237,  236,

      235,  232,  231,  230,  229,  225,  224,  223,  220,  219,
      216,  215,  214,  210,  209,  208,  205,  202,  201,  200,
      199,  198,  197,  196,  195,  194,  193,  190,  189,  188,
      168,  167,  166,  408,  162,  408,  158,  157,  156,  138,
      130,  114,  113,  109,  105,  408,   59,   59,    9,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408
    } ;

static yyconst short int yy_chk[610] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    5,   13,   14,    5,    3,    4,    6,   15,
       17,    6,   16,   25,  417,   25,   15,   18,   20,   13,
       19,   18,   15,   15,   15,   16,   21,   20,   18,   31,
       19,   14,   36,   28,   17,   22,   21,   38,   22,   31,

       38,   36,   22,   26,   39,  403,   21,   28,   28,   22,
       23,   39,   23,   23,   23,   23,   26,   26,   26,   34,
       35,   34,   37,   23,   42,   41,   50,   35,   23,   23,
       35,  402,   37,   35,   42,   45,   45,   23,   41,   43,
       62,   43,   72,   37,   43,   45,   46,   47,   45,   46,
      184,   47,   49,   49,   23,   23,   24,   46,   24,   24,
       24,   24,  129,   48,   46,   50,   72,   62,   66,   24,
       24,   48,   24,   24,  184,   76,   48,  129,   66,   89,
       89,   89,   89,   24,   24,   76,   94,   94,   96,   24,
       98,   91,  400,   91,   91,   91,   91,   24,   90,  399,

       90,   90,   90,   90,   91,   96,   99,   98,   99,  102,
      102,   90,  108,  108,   90,   90,   92,   92,   91,  140,
       92,   92,   92,   92,  112,   90,  131,  112,  117,  117,
      183,   90,  131,  136,  143,  159,  140,  136,  112,   90,
      112,  147,  136,  152,  143,  159,  160,  152,  163,  147,
      147,  164,  171,  112,  285,  394,  160,  183,  163,  285,
      219,  164,  169,  169,  169,  169,  187,  246,  187,  171,
      219,  174,  174,  169,  243,  245,  169,  172,  172,  172,
      172,  173,  173,  173,  173,  175,  175,  169,  174,  249,
      390,  243,  245,  169,  246,  173,  174,  239,  239,  175,

      175,  239,  239,  239,  239,  254,  274,  254,  387,  386,
      290,  274,  173,  249,  274,  290,  175,  292,  303,  303,
      303,  303,  292,  385,  175,  304,  304,  304,  304,  356,
      391,  398,  384,  382,  356,  391,  398,  381,  380,  304,
      379,  375,  374,  373,  372,  367,  358,  357,  355,  353,
      350,  349,  346,  345,  343,  342,  304,  409,  409,  409,
      410,  410,  410,  411,  411,  411,  412,  412,  412,  413,
      413,  413,  414,  414,  415,  415,  415,  416,  416,  416,
      418,  418,  418,  419,  419,  419,  420,  420,  420,  339,
      337,  336,  334,  333,  332,  331,  330,  329,  328,  327,

      326,  324,  323,  322,  321,  320,  319,  318,  317,  316,
      315,  314,  313,  311,  310,  309,  308,  301,  298,  297,
      296,  295,  294,  293,  291,  289,  288,  287,  286,  284,
      283,  282,  281,  280,  279,  278,  277,  275,  272,  271,
      270,  269,  266,  265,  264,  263,  261,  259,  255,  251,
      248,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  223,  222,  221,  220,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  208,  207,  206,  205,  203,
      202,  201,  200,  199,  198,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  186,  185,  165,  161,  155,

      153,  151,  150,  149,  148,  146,  145,  144,  142,  141,
      139,  138,  137,  135,  134,  132,  130,  127,  126,  125,
      124,  123,  122,  121,  120,  119,  118,  116,  115,  114,
       87,   84,   82,   74,   70,   64,   57,   54,   51,   44,
       40,   33,   32,   29,   27,    9,    8,    7,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  408,  408,  408,  408,  408,  408,  408,  408,  408,

      408,  408,  408,  408,  408,  408,  408,  408,  408
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define INITIAL 0
/**
 **********************************************************************
 * Copyright (c) 1988-2003 $organization$.
 *
 * This software is provided by the author and contributors ``as is'' and
 * any express or implied warranties, including, but not limited to, the
 * implied warranties of merchantability and fitness for a particular purpose
 * are disclaimed.  In no event shall the author or contributors be liable
 * for any direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute goods
 * or services; loss of use, data, or profits; or business interruption)
 * however caused and on any theory of liability, whether in contract, strict
 * liability, or tort (including negligence or otherwise) arising in any way
 * out of the use of this software, even if advised of the possibility of
 * such damage.
 *
 *   File: cdtlex.l
 *
 * Author: $author$
 *   Date: 8/25/2003
 *
 *    $Id$
 **********************************************************************
 */
#include "cdtparse.h"
#include "cdtlexer.hxx"
#define COMMENT 1
#define COMMENT2 2
#define COMMENTEOL 3


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef yyLexer
#include "yylexer.hxx"
#endif

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#ifndef YY_NO_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO yy_lexer_output( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = yy_lexer_input( (char *) buf, max_size )) < 0 ) \
        YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_lexer_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
    {
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;




    if ( yy_init )
        {
        yy_init = 0;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! yy_start )
            yy_start = 1;    /* first start state */

        if ( ! yyin )
            return EOF;

        if ( ! yyout )
            {
            YY_FATAL_ERROR("No output stream specified");
            return EOF;
            };

        if ( ! yy_current_buffer )
            yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

        yy_load_buffer_state();
        }

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 409 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 549 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

        YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:    /* This label is used only to access EOF actions. */


        switch ( yy_act )
    { /* beginning of action switch */

case 1:
YY_RULE_SETUP
{ OnPushState(yytext, COMMENT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{ OnPushState(yytext, COMMENT2); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ OnPushState(yytext, COMMENTEOL); }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_DO; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_WHILE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_UNTIL; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_FOR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_EACH; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_OF; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_SWITCH; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_CASE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_WHEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_DEFAULT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_IF; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_ELSE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_WITH; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TRY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_CATCH; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_THROW; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_BREAK; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_CONTINUE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_RETURN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_POSITIONOF; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_SIZEOF; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TEXTOF; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TYPEOF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_PREFIXOF; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NAMEOF; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NAMESPACEOF; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_POSITIONIS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_SIZEIS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TEXTIS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TYPEIS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_PREFIXIS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NAMEIS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NAMESPACEIS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_USING; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NAMESPACE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_TEMPLATE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_VARIABLE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_VIRTUAL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_PUBLIC; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_PRIVATE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_PROTECTED; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_CLASS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_STRUCT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_UNION; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_VOID; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_BOOL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_CHAR; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_FLOAT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_DOUBLE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_STRING; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_INT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_SHORT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LONG; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_SIGNED; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_UNSIGNED; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ OnReserved(yytext,XX_INCLUDE); return XX_INCLUDE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_EXTERN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_NATIVE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_FOREIGN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LNOT_OP;}
	YY_BREAK
case 64:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LAND_OP;}
	YY_BREAK
case 65:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LOR_OP;}
	YY_BREAK
case 66:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LCOM_OP;}
	YY_BREAK
case 67:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LAND_ASSIGN;}
	YY_BREAK
case 68:
YY_RULE_SETUP
{ OnReserved(yytext); return XX_LOR_ASSIGN;}
	YY_BREAK
case 69:
YY_RULE_SETUP
{ OnText(yytext); return XX_COLONCOLON_AND;}
	YY_BREAK
case 70:
YY_RULE_SETUP
{ OnText(yytext); return XX_COLONCOLON_STAR;}
	YY_BREAK
case 71:
YY_RULE_SETUP
{ OnText(yytext); return XX_COLONCOLON;}
	YY_BREAK
case 72:
YY_RULE_SETUP
{ OnText(yytext); return XX_DOTDOT;}
	YY_BREAK
case 73:
YY_RULE_SETUP
{ OnText(yytext); return XX_ELIPSIS;}
	YY_BREAK
case 74:
YY_RULE_SETUP
{ OnText(yytext); return XX_BSLASHBSLASH_SHR;}
	YY_BREAK
case 75:
YY_RULE_SETUP
{ OnText(yytext); return XX_BSLASHBSLASH_SHL;}
	YY_BREAK
case 76:
YY_RULE_SETUP
{ OnText(yytext); return XX_BSLASHBSLASH;}
	YY_BREAK
case 77:
YY_RULE_SETUP
{ OnText(yytext); return XX_DOTBSLASHQUESTION;}
	YY_BREAK
case 78:
YY_RULE_SETUP
{ OnText(yytext); return XX_BSLASHQUESTION;}
	YY_BREAK
case 79:
YY_RULE_SETUP
{ OnText(yytext); return XX_ATQUESTION;}
	YY_BREAK
case 80:
YY_RULE_SETUP
{ OnText(yytext); return XX_DOTQUESTION;}
	YY_BREAK
case 81:
YY_RULE_SETUP
{ OnPunctuation(yytext,XX_PERCENT_LESS); return XX_PERCENT_LESS;}
	YY_BREAK
case 82:
YY_RULE_SETUP
{ OnPunctuation(yytext,XX_GREATER_PERCENT); return XX_GREATER_PERCENT;}
	YY_BREAK
case 83:
YY_RULE_SETUP
{ OnPunctuation(yytext,XX_PERCENT_GREATER); return XX_PERCENT_GREATER;}
	YY_BREAK
case 84:
YY_RULE_SETUP
{ OnPunctuation(yytext,XX_LESS_PERCENT); return XX_LESS_PERCENT;}
	YY_BREAK
case 85:
YY_RULE_SETUP
{ OnText(yytext); return XX_SHR_ASSIGN;}
	YY_BREAK
case 86:
YY_RULE_SETUP
{ OnText(yytext); return XX_SHL_ASSIGN;}
	YY_BREAK
case 87:
YY_RULE_SETUP
{ OnText(yytext); return XX_LAND_ASSIGN;}
	YY_BREAK
case 88:
YY_RULE_SETUP
{ OnText(yytext); return XX_LOR_ASSIGN;}
	YY_BREAK
case 89:
YY_RULE_SETUP
{ OnText(yytext); return XX_ADD_ASSIGN;}
	YY_BREAK
case 90:
YY_RULE_SETUP
{ OnText(yytext); return XX_SUB_ASSIGN;}
	YY_BREAK
case 91:
YY_RULE_SETUP
{ OnText(yytext); return XX_MUL_ASSIGN;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{ OnText(yytext); return XX_DIV_ASSIGN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
{ OnText(yytext); return XX_MOD_ASSIGN;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{ OnText(yytext); return XX_AND_ASSIGN;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{ OnText(yytext); return XX_OR_ASSIGN;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{ OnText(yytext); return XX_XOR_ASSIGN;}
	YY_BREAK
case 97:
YY_RULE_SETUP
{ OnText(yytext); return XX_ASSIGN;}
	YY_BREAK
case 98:
YY_RULE_SETUP
{ OnText(yytext); return XX_RIGHT_OP;}
	YY_BREAK
case 99:
YY_RULE_SETUP
{ OnText(yytext); return XX_LEFT_OP;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ OnText(yytext); return XX_INC_OP;}
	YY_BREAK
case 101:
YY_RULE_SETUP
{ OnText(yytext); return XX_DEC_OP;}
	YY_BREAK
case 102:
YY_RULE_SETUP
{ OnText(yytext); return XX_COM_OP;}
	YY_BREAK
case 103:
YY_RULE_SETUP
{ OnText(yytext); return XX_LCOM_OP;}
	YY_BREAK
case 104:
YY_RULE_SETUP
{ OnText(yytext); return XX_LE_OP;}
	YY_BREAK
case 105:
YY_RULE_SETUP
{ OnText(yytext); return XX_GE_OP;}
	YY_BREAK
case 106:
YY_RULE_SETUP
{ OnText(yytext); return XX_NE_OP;}
	YY_BREAK
case 107:
YY_RULE_SETUP
{ OnText(yytext); return XX_NE_OP;}
	YY_BREAK
case 108:
YY_RULE_SETUP
{ OnText(yytext); return XX_EQ_OP;}
	YY_BREAK
case 109:
YY_RULE_SETUP
{ OnText(yytext); return XX_SHR_OP;}
	YY_BREAK
case 110:
YY_RULE_SETUP
{ OnText(yytext); return XX_SHL_OP;}
	YY_BREAK
case 111:
YY_RULE_SETUP
{ OnText(yytext); return XX_LAND_OP;}
	YY_BREAK
case 112:
YY_RULE_SETUP
{ OnText(yytext); return XX_LOR_OP;}
	YY_BREAK
case 113:
YY_RULE_SETUP
{ OnText(yytext); return XX_POW_OP;}
	YY_BREAK
case 114:
YY_RULE_SETUP
{ OnText(yytext); return XX_ROO_OP;}
	YY_BREAK
case 115:
YY_RULE_SETUP
{ OnText(yytext); return XX_LOG_OP;}
	YY_BREAK
case 116:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,0,XX_DEC_LITERAL)) return -1; else return XX_DEC_LITERAL; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ if (OnLiteral(yytext,2,0,XX_HEX_LITERAL)) return -1; else return XX_HEX_LITERAL; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ if (OnLiteral(yytext,2,0,XX_BIN_LITERAL)) return -1; else return XX_BIN_LITERAL; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ if (OnLiteral(yytext,1,0,XX_OCT_LITERAL)) return -1; else return XX_OCT_LITERAL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,0,XX_FLOAT_LITERAL)) return -1; return XX_FLOAT_LITERAL; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,0,XX_FLOAT_LITERAL)) return -1; return XX_FLOAT_LITERAL; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,0,XX_FLOAT_LITERAL)) return -1; return XX_FLOAT_LITERAL; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ if (OnIdentifier(yytext,0,0,XX_IDENTIFIER)) return -1; return XX_IDENTIFIER; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,2,XX_TEMPLATE_LITERAL)) return -1; return XX_TEMPLATE_LITERAL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ if (OnLiteral(yytext,0,2,XX_TEMPLATE_LITERAL)) return -1; return XX_TEMPLATE_LITERAL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ if (OnStringLiteral(yytext,0,1,XX_TEXT_LITERAL)) return -1; return XX_TEXT_LITERAL; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ if (OnStringLiteral(yytext,0,1,XX_TEXT_LITERAL)) return -1; return XX_TEXT_LITERAL; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ if (OnStringLiteral(yytext,2,1,XX_URI_LITERAL)) return -1; return XX_URI_LITERAL; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ if (OnStringLiteral(yytext,2,1,XX_URI_LITERAL)) return -1; return XX_URI_LITERAL; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ if (OnStringLiteral(yytext,2,1,XX_ELEMENT_LITERAL)) return -1; return XX_ELEMENT_LITERAL; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ OnText(yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ OnText(yytext); return yytext[0];}
	YY_BREAK


case 133:
YY_RULE_SETUP
{ OnPopState(yytext, COMMENT);}
	YY_BREAK
case 134:
YY_RULE_SETUP
{ OnComment(yytext, COMMENT); }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ OnComment(yytext, COMMENT); }
	YY_BREAK


case 136:
YY_RULE_SETUP
{ OnPopState(yytext, COMMENT2);}
	YY_BREAK
case 137:
YY_RULE_SETUP
{ OnComment(yytext, COMMENT2); }
	YY_BREAK
case 138:
YY_RULE_SETUP
{ OnComment(yytext, COMMENT2); }
	YY_BREAK


case 139:
YY_RULE_SETUP
{ OnPopState(yytext, COMMENTEOL);}
	YY_BREAK
case 140:
YY_RULE_SETUP
{ OnComment(yytext, COMMENTEOL); }
	YY_BREAK

case 141:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(COMMENT):
			case YY_STATE_EOF(COMMENT2):
			case YY_STATE_EOF(COMMENTEOL):
				yyterminate();

    case YY_END_OF_BUFFER:
        {
        /* Amount of text matched not including the EOB char. */
        int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

        /* Undo the effects of YY_DO_BEFORE_ACTION. */
        *yy_cp = yy_hold_char;

        if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
            {
            /* We're scanning a new file or input source.  It's
             * possible that this happened because the user
             * just pointed yyin at a new source and called
             * yylex().  If so, then we have to assure
             * consistency between yy_current_buffer and our
             * globals.  Here is the right place to do so, because
             * this is the first action (other than possibly a
             * back-up) that will match for the new input source.
             */
            yy_n_chars = yy_current_buffer->yy_n_chars;
            yy_current_buffer->yy_input_file = yyin;
            yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
            }

        /* Note that here we test for yy_c_buf_p "<=" to the position
         * of the first EOB in the buffer, since yy_c_buf_p will
         * already have been incremented past the NUL character
         * (since all states make transitions on EOB to the
         * end-of-buffer state).  Contrast this with the test
         * in input().
         */
        if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            { /* This was really a NUL. */
            yy_state_type yy_next_state;

            yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

            yy_current_state = yy_get_previous_state();

            /* Okay, we're now positioned to make the NUL
             * transition.  We couldn't have
             * yy_get_previous_state() go ahead and do it
             * for us because it doesn't know how to deal
             * with the possibility of jamming (and we don't
             * want to build jamming into it because then it
             * will run more slowly).
             */

            yy_next_state = yy_try_NUL_trans( yy_current_state );

            yy_bp = yytext_ptr + YY_MORE_ADJ;

            if ( yy_next_state )
                {
                /* Consume the NUL. */
                yy_cp = ++yy_c_buf_p;
                yy_current_state = yy_next_state;
                goto yy_match;
                }

            else
                {
				yy_cp = yy_c_buf_p;
                goto yy_find_action;
                }
            }

        else switch ( yy_get_next_buffer() )
            {
            case EOB_ACT_END_OF_FILE:
                {
                yy_did_buffer_switch_on_eof = 0;

                if ( yywrap() )
                    {
                    /* Note: because we've taken care in
                     * yy_get_next_buffer() to have set up
                     * yytext, we can now set up
                     * yy_c_buf_p so that if some total
                     * hoser (like flex itself) wants to
                     * call the scanner after we return the
                     * YY_NULL, it'll still work - another
                     * YY_NULL will get returned.
                     */
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                    yy_act = YY_STATE_EOF(YY_START);
                    goto do_action;
                    }

                else
                    {
                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
                    }
                break;
                }

            case EOB_ACT_CONTINUE_SCAN:
                yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_match;

            case EOB_ACT_LAST_MATCH:
                yy_c_buf_p =
                &yy_current_buffer->yy_ch_buf[yy_n_chars];

                yy_current_state = yy_get_previous_state();

                yy_cp = yy_c_buf_p;
                yy_bp = yytext_ptr + YY_MORE_ADJ;
                goto yy_find_action;
            }
        break;
        }

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
    } /* end of yylex */

int yyIsLexer::yyprintf( const char* format, ... )
    {
    va_list arg;
    int result;

    va_start(arg,format);
    result=vprintf(format,arg);
    va_end(arg);
    return result;
    }

int yyIsLexer::yywrap()
    {
    return 1;
    }

yyIsLexer::yyIsLexer(cCharStream &out, cCharStream &in)
    : m_out(out),
      m_in(in)
    {
    yy_initialize();
    yyin = &in;
    yyout = &out;
    }

yyIsLexer::~yyIsLexer()
    {
    yy_finish();
    }

#ifdef YY_INTERACTIVE
int yyIsLexer::yy_lexer_input( char* buf, int /* max_size */ )
#else
int yyIsLexer::yy_lexer_input( char* buf, int max_size )
#endif
    {
    int count;
#ifdef YY_INTERACTIVE
    char c;

    if ((count=yyin->Get(c)) < 0)
        return 0;

    buf[0]=c;
#else

    if ((count=yyin->Read(buf, max_size )) < 0)
        return 0;
#endif

    return count;
    }

void yyIsLexer::yy_lexer_output( const char* buf, int size )
    {
    yyout->Write(buf, size );
    }


void yyIsLexer::yy_initialize( void )
    {
    yyin = 0;
    yyout = 0;
    yy_c_buf_p = 0;
    yy_init = 1;
    yy_start = 0;
    yy_did_buffer_switch_on_eof = 0;
    yy_start_stack_ptr = 0;
    yy_start_stack_depth = 0;
    yy_start_stack = 0;
    yy_current_buffer = 0;
    yylineno = 1;    /* this will only get updated if %option yylineno */
    yy_flex_debug = 0;
    yy_looking_for_trail_begin = 0;
    yy_more_flag = 0;
    yy_more_len = 0;

#ifdef YY_USES_REJECT
    yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
    yy_state_buf = 0;
#endif
    }


void yyIsLexer::yy_finish( void )
    {
    delete yy_state_buf;
    yy_delete_buffer( yy_current_buffer );
    }


void yyIsLexer::yy_reset( void )
    {
    yy_finish();
    yy_initialize();
    }


void *yyIsLexer::yy_save_scan_state( cCharStream *input_file )
    {
    YY_BUFFER_STATE old_state,new_state;

    if ((old_state=yy_current_buffer))
		old_state->yy_lineno = yylineno;

    if ((new_state=yy_create_buffer(input_file,YY_BUF_SIZE))!=0)
        yy_switch_to_buffer(new_state);

    yylineno = 1;

    return old_state;
    }


void yyIsLexer::yy_restore_scan_state( void *old_state )
    {
    YY_BUFFER_STATE current_state;
    YY_BUFFER_STATE previous_state;

    current_state=yy_current_buffer;

    yy_switch_to_buffer(previous_state=(YY_BUFFER_STATE)old_state);
    yylineno = previous_state->yy_lineno;

    if (current_state)
        yy_delete_buffer(current_state);
    }


void yyIsLexer::yy_switch_streams( cCharStream* new_in, cCharStream* new_out )
    {
    if ( new_in )
        {
        yy_delete_buffer( yy_current_buffer );
        yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
        }

    if ( new_out )
        yyout = new_out;
    }

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */

int yyIsLexer::yy_get_next_buffer()
    {
    register char *dest = yy_current_buffer->yy_ch_buf;
    register char *source = yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
        YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

    if ( yy_current_buffer->yy_fill_buffer == 0 )
        { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
            {
            /* We matched a singled characater, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
            }

        else
            {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
            }
        }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        yy_n_chars = 0;

    else
        {
        int num_to_read =
            yy_current_buffer->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
            { /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
            YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = yy_current_buffer;

            int yy_c_buf_p_offset =
                (int) (yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
                {
                int new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yy_flex_realloc( (void *) b->yy_ch_buf,
                             b->yy_buf_size + 2 );
                }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                "fatal error - scanner input buffer overflow" );

            yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
            }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
            yy_n_chars, num_to_read );
        }

    if ( yy_n_chars == 0 )
        {
        if ( number_to_move == YY_MORE_ADJ )
            {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart( yyin );
            }

        else
            {
            ret_val = EOB_ACT_LAST_MATCH;
            yy_current_buffer->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
            }
        }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

    return ret_val;
    }


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyIsLexer::yy_get_previous_state()
    {
    register yy_state_type yy_current_state;
    register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
        {
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 409 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
        }

    return yy_current_state;
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyIsLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
    {
    register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 409 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 408);

    return yy_is_jam ? 0 : yy_current_state;
    }


void yyIsLexer::yyunput( int c, register char* yy_bp )
    {
    register char *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yytext */
    *yy_cp = yy_hold_char;

    if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
        { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = yy_n_chars + 2;
        register char *dest = &yy_current_buffer->yy_ch_buf[
                    yy_current_buffer->yy_buf_size + 2];
        register char *source =
                &yy_current_buffer->yy_ch_buf[number_to_move];

        while ( source > yy_current_buffer->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        yy_n_chars = yy_current_buffer->yy_buf_size;

        if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }

    *--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

    yytext_ptr = yy_bp;
    yy_hold_char = *yy_cp;
    yy_c_buf_p = yy_cp;
    }


int yyIsLexer::yyinput()
    {
    int c;

    *yy_c_buf_p = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
        {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
            /* This was really a NUL. */
            *yy_c_buf_p = '\0';

        else
            { /* need more input */
            yytext_ptr = yy_c_buf_p;
            ++yy_c_buf_p;

            switch ( yy_get_next_buffer() )
                {
                case EOB_ACT_END_OF_FILE:
                    {
                    if ( yywrap() )
                        {
                        yy_c_buf_p =
                        yytext_ptr + YY_MORE_ADJ;
                        return EOF;
                        }

                    if ( ! yy_did_buffer_switch_on_eof )
                        YY_NEW_FILE;
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                    }

                case EOB_ACT_CONTINUE_SCAN:
                    yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
                    break;

                case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
                    YY_FATAL_ERROR(
                    "unexpected last match in yyinput()" );
#else
                    YY_FATAL_ERROR(
                    "unexpected last match in input()" );
#endif
                }
            }
        }

    c = *(unsigned char *) yy_c_buf_p;    /* cast for 8-bit char's */
    *yy_c_buf_p = '\0';    /* preserve yytext */
    yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

    return c;
    }


void yyIsLexer::yyrestart( cCharStream* input_file )
    {
    if ( ! yy_current_buffer )
        yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

    yy_init_buffer( yy_current_buffer, input_file );
    yy_load_buffer_state();
    }


void yyIsLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
    {
    if ( yy_current_buffer == new_buffer )
        return;

    if ( yy_current_buffer )
        {
        /* Flush out information for old buffer. */
        *yy_c_buf_p = yy_hold_char;
        yy_current_buffer->yy_buf_pos = yy_c_buf_p;
        yy_current_buffer->yy_n_chars = yy_n_chars;
        }

    yy_current_buffer = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


void yyIsLexer::yy_load_buffer_state()
    {
    yy_n_chars = yy_current_buffer->yy_n_chars;
    yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
    yyin = yy_current_buffer->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


YY_BUFFER_STATE yyIsLexer::yy_create_buffer( cCharStream* file, int size )
    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer( b, file );

    return b;
    }


void yyIsLexer::yy_delete_buffer( YY_BUFFER_STATE b )
    {
    if ( ! b )
        return;

    if ( b == yy_current_buffer )
        yy_current_buffer = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yy_flex_free( (void *) b->yy_ch_buf );

    yy_flex_free( (void *) b );
    }


void yyIsLexer::yy_init_buffer( YY_BUFFER_STATE b, cCharStream* file )

    {
    yy_flush_buffer( b );

    b->yy_input_file = file;
	b->yy_lineno = 1;
    b->yy_fill_buffer = 1;

    b->yy_is_interactive = 0;
    }


void yyIsLexer::yy_flush_buffer( YY_BUFFER_STATE b )
    {
    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == yy_current_buffer )
        yy_load_buffer_state();
    }


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyIsLexer::yy_push_state( int new_state )
    {
    if ( yy_start_stack_ptr >= yy_start_stack_depth )
        {
        yy_size_t new_size;

        yy_start_stack_depth += YY_START_STACK_INCR;
        new_size = yy_start_stack_depth * sizeof( int );

        if ( ! yy_start_stack )
            yy_start_stack = (int *) yy_flex_alloc( new_size );

        else
            yy_start_stack = (int *) yy_flex_realloc(
                    (void *) yy_start_stack, new_size );

        if ( ! yy_start_stack )
            YY_FATAL_ERROR(
            "out of memory expanding start-condition stack" );
        }

    yy_start_stack[yy_start_stack_ptr++] = YY_START;

    BEGIN(new_state);
    }
#endif


#ifndef YY_NO_POP_STATE
void yyIsLexer::yy_pop_state()
    {
    if ( --yy_start_stack_ptr < 0 )
        YY_FATAL_ERROR( "start-condition stack underflow" );

    BEGIN(yy_start_stack[yy_start_stack_ptr]);
    }
#endif


#ifndef YY_NO_TOP_STATE
int yyIsLexer::yy_top_state()
    {
    return yy_start_stack[yy_start_stack_ptr - 1];
    }
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyIsLexer::yy_lexer_error( yyconst char *msg )
    {
    yyprintf("%s\n",msg);
    exit( YY_EXIT_FAILURE );
    }


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        yytext[yyleng] = yy_hold_char; \
        yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
        yy_hold_char = *yy_c_buf_p; \
        *yy_c_buf_p = '\0'; \
        yyleng = n; \
        } \
    while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
    {
    register int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
    }
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
    {
    return (void *) malloc( size );
    }

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
    {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
    }

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
    {
    free( ptr );
    }

#if YY_MAIN
int main()
    {
    yylex();
    return 0;
    }
#endif

